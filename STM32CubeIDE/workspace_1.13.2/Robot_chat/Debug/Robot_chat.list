
Robot_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a4c  08003a4c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a54  08003a54  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08003ac4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003ac4  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4b3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e14  00000000  00000000  0002c58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007de  00000000  00000000  0002ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db16  00000000  00000000  0002f5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7c5  00000000  00000000  0004d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b84b3  00000000  00000000  000598b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f40  00000000  00000000  00111d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00114cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003984 	.word	0x08003984

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08003984 	.word	0x08003984

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <lidar_start_scanning>:
 */

#include "lidar.h"

int lidar_start_scanning(lidar_t * lidar)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	lidar->serial_drv.transmit(CMD_START);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f24a 5060 	movw	r0, #42336	; 0xa560
 8000524:	4798      	blx	r3
	//HAL_UART_Transmit(&huart1, CMD_START, 1, HAL_MAX_DELAY);
	return 0;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 * */

int __io_putchar(int chr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000538:	1d39      	adds	r1, r7, #4
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053e:	2201      	movs	r2, #1
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <__io_putchar+0x20>)
 8000542:	f001 fe85 	bl	8002250 <HAL_UART_Transmit>
	return chr;
 8000546:	687b      	ldr	r3, [r7, #4]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000084 	.word	0x20000084

08000554 <uart_transmit>:

int uart_transmit(uint16_t cmd)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, cmd, 1, HAL_MAX_DELAY);
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4619      	mov	r1, r3
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000566:	2201      	movs	r2, #1
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <uart_transmit+0x24>)
 800056a:	f001 fe71 	bl	8002250 <HAL_UART_Transmit>
	return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000114 	.word	0x20000114

0800057c <uart_receive>:

int uart_receive(uint8_t *p_data, uint16_t size)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, p_data, size, HAL_MAX_DELAY);
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <uart_receive+0x24>)
 8000592:	f001 fef3 	bl	800237c <HAL_UART_Receive>
	return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000114 	.word	0x20000114

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fb3b 	bl	8000c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f826 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f906 	bl	80007c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005b4:	f000 f86e 	bl	8000694 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f8b6 	bl	8000728 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  h_lidar.serial_drv.receive = uart_receive;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <main+0x40>)
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <main+0x44>)
 80005c0:	605a      	str	r2, [r3, #4]
  h_lidar.serial_drv.transmit = uart_transmit;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <main+0x40>)
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <main+0x48>)
 80005c6:	601a      	str	r2, [r3, #0]

  printf("\r\n===== YLIDAR X4 =====\r\n");
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <main+0x4c>)
 80005ca:	f002 fe45 	bl	8003258 <puts>
  printf("Connecter VCC sur le 5V et GND sur GND\r\n");
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <main+0x50>)
 80005d0:	f002 fe42 	bl	8003258 <puts>
  printf("TX sur PC4, RX sur PC5, M_EN sur le 3.3V\r\n");
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <main+0x54>)
 80005d6:	f002 fe3f 	bl	8003258 <puts>

  lidar_start_scanning(&h_lidar);
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <main+0x40>)
 80005dc:	f7ff ff9a 	bl	8000514 <lidar_start_scanning>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x3c>
 80005e2:	bf00      	nop
 80005e4:	200001a4 	.word	0x200001a4
 80005e8:	0800057d 	.word	0x0800057d
 80005ec:	08000555 	.word	0x08000555
 80005f0:	0800399c 	.word	0x0800399c
 80005f4:	080039b8 	.word	0x080039b8
 80005f8:	080039e0 	.word	0x080039e0

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2238      	movs	r2, #56	; 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fe2c 	bl	8003268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fdee 	bl	8001200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2340      	movs	r3, #64	; 0x40
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800063a:	2304      	movs	r3, #4
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800063e:	2355      	movs	r3, #85	; 0x55
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fe88 	bl	8001368 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065e:	f000 f915 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f98c 	bl	8001998 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000686:	f000 f901 	bl	800088c <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 800069a:	4a22      	ldr	r2, [pc, #136]	; (8000724 <MX_LPUART1_UART_Init+0x90>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	f001 fd6a 	bl	80021b0 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 f8d3 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	f002 fbd5 	bl	8002e98 <HAL_UARTEx_SetTxFifoThreshold>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006f4:	f000 f8ca 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	f002 fc0a 	bl	8002f14 <HAL_UARTEx_SetRxFifoThreshold>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000706:	f000 f8c1 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	f002 fb8b 	bl	8002e26 <HAL_UARTEx_DisableFifoMode>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000716:	f000 f8b9 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000084 	.word	0x20000084
 8000724:	40008000 	.word	0x40008000

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <MX_USART1_UART_Init+0x94>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000734:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000772:	f001 fd1d 	bl	80021b0 <HAL_UART_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f886 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000784:	f002 fb88 	bl	8002e98 <HAL_UARTEx_SetTxFifoThreshold>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800078e:	f000 f87d 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 8000796:	f002 fbbd 	bl	8002f14 <HAL_UARTEx_SetRxFifoThreshold>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007a0:	f000 f874 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_USART1_UART_Init+0x90>)
 80007a6:	f002 fb3e 	bl	8002e26 <HAL_UARTEx_DisableFifoMode>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f86c 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000114 	.word	0x20000114
 80007bc:	40013800 	.word	0x40013800

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xc4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f000 fcc7 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000848:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0xc8>)
 800085a:	f000 fb37 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085e:	2320      	movs	r3, #32
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fb28 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000800 	.word	0x48000800

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ce:	f000 fd3b 	bl	8001348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	2244      	movs	r2, #68	; 0x44
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fcb1 	bl	8003268 <memset>
  if(huart->Instance==LPUART1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <HAL_UART_MspInit+0x120>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d137      	bne.n	8000980 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000910:	2320      	movs	r3, #32
 8000912:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fa57 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff ffb0 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <HAL_UART_MspInit+0x124>)
 800092e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000930:	4a34      	ldr	r2, [pc, #208]	; (8000a04 <HAL_UART_MspInit+0x124>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <HAL_UART_MspInit+0x124>)
 800093a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <HAL_UART_MspInit+0x124>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <HAL_UART_MspInit+0x124>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000950:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <HAL_UART_MspInit+0x124>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800095c:	230c      	movs	r3, #12
 800095e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800096c:	230c      	movs	r3, #12
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 faa7 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800097e:	e03a      	b.n	80009f6 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <HAL_UART_MspInit+0x128>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d135      	bne.n	80009f6 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fa1a 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80009a2:	f7ff ff73 	bl	800088c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x124>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <HAL_UART_MspInit+0x124>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6613      	str	r3, [r2, #96]	; 0x60
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_UART_MspInit+0x124>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x124>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x124>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x124>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009d6:	2330      	movs	r3, #48	; 0x30
 80009d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e6:	2307      	movs	r3, #7
 80009e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009ee:	4619      	mov	r1, r3
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <HAL_UART_MspInit+0x12c>)
 80009f2:	f000 fa6b 	bl	8000ecc <HAL_GPIO_Init>
}
 80009f6:	bf00      	nop
 80009f8:	3770      	adds	r7, #112	; 0x70
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40008000 	.word	0x40008000
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	48000800 	.word	0x48000800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f934 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
  }

  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	e009      	b.n	8000ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fd39 	bl	8000530 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf1      	blt.n	8000ab0 <_write+0x12>
  }
  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_close>:

int _close(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afe:	605a      	str	r2, [r3, #4]
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_isatty>:

int _isatty(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f002 fb82 	bl	8003278 <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20008000 	.word	0x20008000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	200001b4 	.word	0x200001b4
 8000ba8:	20000308 	.word	0x20000308

08000bac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 fb41 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fccf 	bl	80005a4 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   r0, =_estack
 8000c08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c14:	08003a5c 	.word	0x08003a5c
  ldr r2, =_sbss
 8000c18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c1c:	20000308 	.word	0x20000308

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>

08000c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f91b 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fe28 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]

}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d022      	beq.n	8000cae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_InitTick+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f918 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10f      	bne.n	8000ca8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d809      	bhi.n	8000ca2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c96:	f000 f8f2 	bl	8000e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_InitTick+0x70>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e007      	b.n	8000cb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e004      	b.n	8000cb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e001      	b.n	8000cb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	200001b8 	.word	0x200001b8
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200001b8 	.word	0x200001b8

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff47 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb2 	bl	8000e24 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eda:	e15a      	b.n	8001192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 814c 	beq.w	800118c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d005      	beq.n	8000f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d017      	beq.n	8000faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d123      	bne.n	8000ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	6939      	ldr	r1, [r7, #16]
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0203 	and.w	r2, r3, #3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80a6 	beq.w	800118c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <HAL_GPIO_Init+0x2e4>)
 8001042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001044:	4a5a      	ldr	r2, [pc, #360]	; (80011b0 <HAL_GPIO_Init+0x2e4>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6613      	str	r3, [r2, #96]	; 0x60
 800104c:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <HAL_GPIO_Init+0x2e4>)
 800104e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001058:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001082:	d01f      	beq.n	80010c4 <HAL_GPIO_Init+0x1f8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d019      	beq.n	80010c0 <HAL_GPIO_Init+0x1f4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x1f0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x2f4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1ec>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1e8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1e4>
 80010ac:	2305      	movs	r3, #5
 80010ae:	e00a      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010b0:	2306      	movs	r3, #6
 80010b2:	e008      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e004      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010bc:	2302      	movs	r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010c4:	2300      	movs	r3, #0
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	f002 0203 	and.w	r2, r2, #3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d6:	4937      	ldr	r1, [pc, #220]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_GPIO_Init+0x300>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001108:	4a30      	ldr	r2, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x300>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x300>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x300>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f ae9d 	bne.w	8000edc <HAL_GPIO_Init+0x10>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000c00 	.word	0x48000c00
 80011c4:	48001000 	.word	0x48001000
 80011c8:	48001400 	.word	0x48001400
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d141      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d131      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001222:	4a46      	ldr	r2, [pc, #280]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001234:	4a41      	ldr	r2, [pc, #260]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2232      	movs	r2, #50	; 0x32
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	0c9b      	lsrs	r3, r3, #18
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001252:	e002      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001266:	d102      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f2      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	d158      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e057      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001286:	4a2d      	ldr	r2, [pc, #180]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800128c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001290:	e04d      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d141      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d131      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ae:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2232      	movs	r2, #50	; 0x32
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012de:	e002      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f2:	d102      	bne.n	80012fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f2      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001306:	d112      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e011      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800131c:	e007      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40007000 	.word	0x40007000
 8001340:	20000000 	.word	0x20000000
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6093      	str	r3, [r2, #8]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e306      	b.n	8001988 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b97      	ldr	r3, [pc, #604]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001390:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3e>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d002      	beq.n	80013ac <HAL_RCC_OscConfig+0x44>
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d10b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d157      	bne.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e2e1      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x74>
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a84      	ldr	r2, [pc, #528]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7b      	ldr	r2, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 8001400:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a74      	ldr	r2, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fc64 	bl	8000cec <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc60 	bl	8000cec <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e2a6      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xc0>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc50 	bl	8000cec <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fc4c 	bl	8000cec <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e292      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	4b60      	ldr	r3, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147e:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x136>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d002      	beq.n	80014a4 <HAL_RCC_OscConfig+0x13c>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d11f      	bne.n	80014e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x154>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e265      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4946      	ldr	r1, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014d0:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fbbd 	bl	8000c54 <HAL_InitTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d043      	beq.n	8001568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e251      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fbf8 	bl	8000cec <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fbf4 	bl	8000cec <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e23a      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	492d      	ldr	r1, [pc, #180]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e01a      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2a      	ldr	r2, [pc, #168]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800153a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fbd4 	bl	8000cec <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fbd0 	bl	8000cec <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e216      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e0>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d041      	beq.n	80015fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fbad 	bl	8000cec <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fba9 	bl	8000cec <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1ef      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ef      	beq.n	8001596 <HAL_RCC_OscConfig+0x22e>
 80015b6:	e020      	b.n	80015fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb90 	bl	8000cec <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ce:	e00d      	b.n	80015ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb8c 	bl	8000cec <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d906      	bls.n	80015ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1d2      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	4b8c      	ldr	r3, [pc, #560]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ea      	bne.n	80015d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a6 	beq.w	8001754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800160c:	4b84      	ldr	r3, [pc, #528]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x2b4>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x2b6>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4b79      	ldr	r3, [pc, #484]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164a:	4b76      	ldr	r3, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a75      	ldr	r2, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fb49 	bl	8000cec <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fb45 	bl	8000cec <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e18b      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4b6c      	ldr	r3, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_RCC_OscConfig+0x32e>
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	e024      	b.n	80016e0 <HAL_RCC_OscConfig+0x378>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d110      	bne.n	80016c0 <HAL_RCC_OscConfig+0x358>
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b4:	4a5a      	ldr	r2, [pc, #360]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x378>
 80016c0:	4b57      	ldr	r3, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	4a56      	ldr	r2, [pc, #344]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d016      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fb00 	bl	8000cec <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff fafc 	bl	8000cec <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e140      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ed      	beq.n	80016f0 <HAL_RCC_OscConfig+0x388>
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fae9 	bl	8000cec <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fae5 	bl	8000cec <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e129      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ed      	bne.n	800171e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d03c      	beq.n	80017da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176e:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fab8 	bl	8000cec <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001780:	f7ff fab4 	bl	8000cec <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0fa      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ef      	beq.n	8001780 <HAL_RCC_OscConfig+0x418>
 80017a0:	e01b      	b.n	80017da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa9b 	bl	8000cec <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ba:	f7ff fa97 	bl	8000cec <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0dd      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80d1 	beq.w	8001986 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f000 808b 	beq.w	8001908 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d15e      	bne.n	80018b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fa71 	bl	8000cec <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	e00c      	b.n	8001828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fa6d 	bl	8000cec <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d905      	bls.n	8001828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0b3      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
 8001820:	40021000 	.word	0x40021000
 8001824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ec      	bne.n	800180e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_RCC_OscConfig+0x62c>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6a11      	ldr	r1, [r2, #32]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001844:	3a01      	subs	r2, #1
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800184e:	0212      	lsls	r2, r2, #8
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	3a01      	subs	r2, #1
 800185a:	0552      	lsls	r2, r2, #21
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001862:	0852      	lsrs	r2, r2, #1
 8001864:	3a01      	subs	r2, #1
 8001866:	0652      	lsls	r2, r2, #25
 8001868:	4311      	orrs	r1, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800186e:	06d2      	lsls	r2, r2, #27
 8001870:	430a      	orrs	r2, r1
 8001872:	4947      	ldr	r1, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a41      	ldr	r2, [pc, #260]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fa2c 	bl	8000cec <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fa28 	bl	8000cec <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e06e      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x530>
 80018b6:	e066      	b.n	8001986 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a34      	ldr	r2, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a2e      	ldr	r2, [pc, #184]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa04 	bl	8000cec <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fa00 	bl	8000cec <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e046      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x580>
 8001906:	e03e      	b.n	8001986 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e039      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	d12c      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d123      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d11b      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d113      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d109      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	019f800c 	.word	0x019f800c

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e11e      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b8e      	ldr	r3, [pc, #568]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 020f 	bic.w	r2, r3, #15
 80019c6:	498c      	ldr	r1, [pc, #560]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b8a      	ldr	r3, [pc, #552]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e106      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d073      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d129      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0f4      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a04:	f000 f99e 	bl	8001d44 <RCC_GetSysClockFreqFromPLLSource>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <HAL_RCC_ClockConfig+0x268>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d93f      	bls.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a12:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d033      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d12f      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a3a:	4a70      	ldr	r2, [pc, #448]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e024      	b.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0c6      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0be      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a70:	f000 f8ce 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_RCC_ClockConfig+0x268>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d909      	bls.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a86:	4a5d      	ldr	r2, [pc, #372]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4957      	ldr	r1, [pc, #348]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f922 	bl	8000cec <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff f91e 	bl	8000cec <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e095      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d023      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b04:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4936      	ldr	r1, [pc, #216]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b80      	cmp	r3, #128	; 0x80
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d21d      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 020f 	bic.w	r2, r3, #15
 8001b50:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f8c8 	bl	8000cec <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f8c4 	bl	8000cec <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e03b      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1ed      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4917      	ldr	r1, [pc, #92]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490f      	ldr	r1, [pc, #60]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc2:	f000 f825 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <HAL_RCC_ClockConfig+0x26c>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f834 	bl	8000c54 <HAL_InitTick>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	04c4b400 	.word	0x04c4b400
 8001c04:	08003a0c 	.word	0x08003a0c
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d102      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e047      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	e03e      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d136      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	68d2      	ldr	r2, [r2, #12]
 8001c70:	0a12      	lsrs	r2, r2, #8
 8001c72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
      break;
 8001c7c:	e00c      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c88:	68d2      	ldr	r2, [r2, #12]
 8001c8a:	0a12      	lsrs	r2, r2, #8
 8001c8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0e5b      	lsrs	r3, r3, #25
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e001      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cb8:	693b      	ldr	r3, [r7, #16]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	016e3600 	.word	0x016e3600

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003a1c 	.word	0x08003a1c

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d1c:	f7ff ffda 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003a1c 	.word	0x08003a1c

08001d44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d10c      	bne.n	8001d82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d68:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d72:	68d2      	ldr	r2, [r2, #12]
 8001d74:	0a12      	lsrs	r2, r2, #8
 8001d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
    break;
 8001d80:	e00c      	b.n	8001d9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d8c:	68d2      	ldr	r2, [r2, #12]
 8001d8e:	0a12      	lsrs	r2, r2, #8
 8001d90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    break;
 8001d9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0e5b      	lsrs	r3, r3, #25
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	016e3600 	.word	0x016e3600
 8001dcc:	00f42400 	.word	0x00f42400

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dd8:	2300      	movs	r3, #0
 8001dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8098 	beq.w	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e26:	f7fe ff61 	bl	8000cec <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe ff5d 	bl	8000cec <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d902      	bls.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	74fb      	strb	r3, [r7, #19]
        break;
 8001e40:	e005      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ef      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d159      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01e      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff1d 	bl	8000cec <HAL_GetTick>
 8001eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb4:	e00b      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe ff19 	bl	8000cec <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d902      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	74fb      	strb	r3, [r7, #19]
            break;
 8001ecc:	e006      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ec      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ef8:	e008      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	74bb      	strb	r3, [r7, #18]
 8001efe:	e005      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0c:	7c7b      	ldrb	r3, [r7, #17]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4ba6      	ldr	r3, [pc, #664]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4aa5      	ldr	r2, [pc, #660]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2a:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f023 0203 	bic.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	499c      	ldr	r1, [pc, #624]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4c:	4b97      	ldr	r3, [pc, #604]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 020c 	bic.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4994      	ldr	r1, [pc, #592]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f6e:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	498b      	ldr	r1, [pc, #556]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f90:	4b86      	ldr	r3, [pc, #536]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	4983      	ldr	r1, [pc, #524]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb2:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	497a      	ldr	r1, [pc, #488]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd4:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	4972      	ldr	r1, [pc, #456]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4969      	ldr	r1, [pc, #420]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002018:	4b64      	ldr	r3, [pc, #400]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4961      	ldr	r1, [pc, #388]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	4958      	ldr	r1, [pc, #352]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	4950      	ldr	r1, [pc, #320]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800207a:	d105      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207c:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002086:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002094:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	4942      	ldr	r1, [pc, #264]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	4926      	ldr	r1, [pc, #152]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002122:	d105      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	4918      	ldr	r1, [pc, #96]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002192:	d105      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e042      	b.n	8002248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe fb83 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2224      	movs	r2, #36	; 0x24
 80021de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f996 	bl	8002524 <UART_SetConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e022      	b.n	8002248 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fc56 	bl	8002abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800221e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800222e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fcdd 	bl	8002c00 <UART_CheckIdleState>
 8002246:	4603      	mov	r3, r0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	2b20      	cmp	r3, #32
 8002268:	f040 8083 	bne.w	8002372 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_UART_Transmit+0x28>
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e07b      	b.n	8002374 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_UART_Transmit+0x3a>
 8002286:	2302      	movs	r3, #2
 8002288:	e074      	b.n	8002374 <HAL_UART_Transmit+0x124>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	; 0x21
 800229e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fd23 	bl	8000cec <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d108      	bne.n	80022d4 <HAL_UART_Transmit+0x84>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e003      	b.n	80022dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80022e4:	e02c      	b.n	8002340 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fcd0 	bl	8002c96 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e039      	b.n	8002374 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	3302      	adds	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e007      	b.n	800232e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1cc      	bne.n	80022e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2200      	movs	r2, #0
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fc9d 	bl	8002c96 <UART_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e006      	b.n	8002374 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	2b20      	cmp	r3, #32
 8002394:	f040 80c0 	bne.w	8002518 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_UART_Receive+0x28>
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b8      	b.n	800251a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Receive+0x3a>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0b1      	b.n	800251a <HAL_UART_Receive+0x19e>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2222      	movs	r2, #34	; 0x22
 80023ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d4:	f7fe fc8a 	bl	8000cec <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f2:	d10e      	bne.n	8002412 <HAL_UART_Receive+0x96>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_UART_Receive+0x8c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002402:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002406:	e02d      	b.n	8002464 <HAL_UART_Receive+0xe8>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002410:	e028      	b.n	8002464 <HAL_UART_Receive+0xe8>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_UART_Receive+0xba>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <HAL_UART_Receive+0xb0>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800242a:	e01b      	b.n	8002464 <HAL_UART_Receive+0xe8>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	227f      	movs	r2, #127	; 0x7f
 8002430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002434:	e016      	b.n	8002464 <HAL_UART_Receive+0xe8>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800243e:	d10d      	bne.n	800245c <HAL_UART_Receive+0xe0>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_UART_Receive+0xd6>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	227f      	movs	r2, #127	; 0x7f
 800244c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002450:	e008      	b.n	8002464 <HAL_UART_Receive+0xe8>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	223f      	movs	r2, #63	; 0x3f
 8002456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800245a:	e003      	b.n	8002464 <HAL_UART_Receive+0xe8>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800246a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d108      	bne.n	8002488 <HAL_UART_Receive+0x10c>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e003      	b.n	8002490 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002498:	e032      	b.n	8002500 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2120      	movs	r1, #32
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fbf6 	bl	8002c96 <UART_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e032      	b.n	800251a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	8a7b      	ldrh	r3, [r7, #18]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	3302      	adds	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	e00c      	b.n	80024ee <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8a7b      	ldrh	r3, [r7, #18]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3301      	adds	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1c6      	bne.n	800249a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b08c      	sub	sp, #48	; 0x30
 800252a:	af00      	add	r7, sp, #0
 800252c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	431a      	orrs	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	431a      	orrs	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4313      	orrs	r3, r2
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4bab      	ldr	r3, [pc, #684]	; (8002800 <UART_SetConfig+0x2dc>)
 8002554:	4013      	ands	r3, r2
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800255c:	430b      	orrs	r3, r1
 800255e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4aa0      	ldr	r2, [pc, #640]	; (8002804 <UART_SetConfig+0x2e0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258c:	4313      	orrs	r3, r2
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800259a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f023 010f 	bic.w	r1, r3, #15
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a91      	ldr	r2, [pc, #580]	; (8002808 <UART_SetConfig+0x2e4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d125      	bne.n	8002614 <UART_SetConfig+0xf0>
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <UART_SetConfig+0x2e8>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d81a      	bhi.n	800260c <UART_SetConfig+0xe8>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <UART_SetConfig+0xb8>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025fd 	.word	0x080025fd
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	08002605 	.word	0x08002605
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025f2:	e0d6      	b.n	80027a2 <UART_SetConfig+0x27e>
 80025f4:	2302      	movs	r3, #2
 80025f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025fa:	e0d2      	b.n	80027a2 <UART_SetConfig+0x27e>
 80025fc:	2304      	movs	r3, #4
 80025fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002602:	e0ce      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002604:	2308      	movs	r3, #8
 8002606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800260a:	e0ca      	b.n	80027a2 <UART_SetConfig+0x27e>
 800260c:	2310      	movs	r3, #16
 800260e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002612:	e0c6      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7d      	ldr	r2, [pc, #500]	; (8002810 <UART_SetConfig+0x2ec>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d138      	bne.n	8002690 <UART_SetConfig+0x16c>
 800261e:	4b7b      	ldr	r3, [pc, #492]	; (800280c <UART_SetConfig+0x2e8>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d82d      	bhi.n	8002688 <UART_SetConfig+0x164>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <UART_SetConfig+0x110>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002669 	.word	0x08002669
 8002638:	08002689 	.word	0x08002689
 800263c:	08002689 	.word	0x08002689
 8002640:	08002689 	.word	0x08002689
 8002644:	08002679 	.word	0x08002679
 8002648:	08002689 	.word	0x08002689
 800264c:	08002689 	.word	0x08002689
 8002650:	08002689 	.word	0x08002689
 8002654:	08002671 	.word	0x08002671
 8002658:	08002689 	.word	0x08002689
 800265c:	08002689 	.word	0x08002689
 8002660:	08002689 	.word	0x08002689
 8002664:	08002681 	.word	0x08002681
 8002668:	2300      	movs	r3, #0
 800266a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800266e:	e098      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002670:	2302      	movs	r3, #2
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002676:	e094      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002678:	2304      	movs	r3, #4
 800267a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800267e:	e090      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002680:	2308      	movs	r3, #8
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002686:	e08c      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002688:	2310      	movs	r3, #16
 800268a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800268e:	e088      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <UART_SetConfig+0x2f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d125      	bne.n	80026e6 <UART_SetConfig+0x1c2>
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <UART_SetConfig+0x2e8>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026a4:	2b30      	cmp	r3, #48	; 0x30
 80026a6:	d016      	beq.n	80026d6 <UART_SetConfig+0x1b2>
 80026a8:	2b30      	cmp	r3, #48	; 0x30
 80026aa:	d818      	bhi.n	80026de <UART_SetConfig+0x1ba>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d00a      	beq.n	80026c6 <UART_SetConfig+0x1a2>
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d814      	bhi.n	80026de <UART_SetConfig+0x1ba>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <UART_SetConfig+0x19a>
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d008      	beq.n	80026ce <UART_SetConfig+0x1aa>
 80026bc:	e00f      	b.n	80026de <UART_SetConfig+0x1ba>
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026c4:	e06d      	b.n	80027a2 <UART_SetConfig+0x27e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026cc:	e069      	b.n	80027a2 <UART_SetConfig+0x27e>
 80026ce:	2304      	movs	r3, #4
 80026d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d4:	e065      	b.n	80027a2 <UART_SetConfig+0x27e>
 80026d6:	2308      	movs	r3, #8
 80026d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026dc:	e061      	b.n	80027a2 <UART_SetConfig+0x27e>
 80026de:	2310      	movs	r3, #16
 80026e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026e4:	e05d      	b.n	80027a2 <UART_SetConfig+0x27e>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4b      	ldr	r2, [pc, #300]	; (8002818 <UART_SetConfig+0x2f4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d125      	bne.n	800273c <UART_SetConfig+0x218>
 80026f0:	4b46      	ldr	r3, [pc, #280]	; (800280c <UART_SetConfig+0x2e8>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026fa:	2bc0      	cmp	r3, #192	; 0xc0
 80026fc:	d016      	beq.n	800272c <UART_SetConfig+0x208>
 80026fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002700:	d818      	bhi.n	8002734 <UART_SetConfig+0x210>
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d00a      	beq.n	800271c <UART_SetConfig+0x1f8>
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d814      	bhi.n	8002734 <UART_SetConfig+0x210>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <UART_SetConfig+0x1f0>
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d008      	beq.n	8002724 <UART_SetConfig+0x200>
 8002712:	e00f      	b.n	8002734 <UART_SetConfig+0x210>
 8002714:	2300      	movs	r3, #0
 8002716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800271a:	e042      	b.n	80027a2 <UART_SetConfig+0x27e>
 800271c:	2302      	movs	r3, #2
 800271e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002722:	e03e      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002724:	2304      	movs	r3, #4
 8002726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800272a:	e03a      	b.n	80027a2 <UART_SetConfig+0x27e>
 800272c:	2308      	movs	r3, #8
 800272e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002732:	e036      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002734:	2310      	movs	r3, #16
 8002736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273a:	e032      	b.n	80027a2 <UART_SetConfig+0x27e>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a30      	ldr	r2, [pc, #192]	; (8002804 <UART_SetConfig+0x2e0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12a      	bne.n	800279c <UART_SetConfig+0x278>
 8002746:	4b31      	ldr	r3, [pc, #196]	; (800280c <UART_SetConfig+0x2e8>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002754:	d01a      	beq.n	800278c <UART_SetConfig+0x268>
 8002756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800275a:	d81b      	bhi.n	8002794 <UART_SetConfig+0x270>
 800275c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002760:	d00c      	beq.n	800277c <UART_SetConfig+0x258>
 8002762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002766:	d815      	bhi.n	8002794 <UART_SetConfig+0x270>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <UART_SetConfig+0x250>
 800276c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002770:	d008      	beq.n	8002784 <UART_SetConfig+0x260>
 8002772:	e00f      	b.n	8002794 <UART_SetConfig+0x270>
 8002774:	2300      	movs	r3, #0
 8002776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800277a:	e012      	b.n	80027a2 <UART_SetConfig+0x27e>
 800277c:	2302      	movs	r3, #2
 800277e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002782:	e00e      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002784:	2304      	movs	r3, #4
 8002786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800278a:	e00a      	b.n	80027a2 <UART_SetConfig+0x27e>
 800278c:	2308      	movs	r3, #8
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002792:	e006      	b.n	80027a2 <UART_SetConfig+0x27e>
 8002794:	2310      	movs	r3, #16
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800279a:	e002      	b.n	80027a2 <UART_SetConfig+0x27e>
 800279c:	2310      	movs	r3, #16
 800279e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <UART_SetConfig+0x2e0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f040 80a8 	bne.w	80028fe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d834      	bhi.n	8002820 <UART_SetConfig+0x2fc>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <UART_SetConfig+0x298>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027e1 	.word	0x080027e1
 80027c0:	08002821 	.word	0x08002821
 80027c4:	080027e9 	.word	0x080027e9
 80027c8:	08002821 	.word	0x08002821
 80027cc:	080027ef 	.word	0x080027ef
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002821 	.word	0x08002821
 80027d8:	08002821 	.word	0x08002821
 80027dc:	080027f7 	.word	0x080027f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e0:	f7ff fa84 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027e6:	e021      	b.n	800282c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <UART_SetConfig+0x2f8>)
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027ec:	e01e      	b.n	800282c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ee:	f7ff fa0f 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027f4:	e01a      	b.n	800282c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027fc:	e016      	b.n	800282c <UART_SetConfig+0x308>
 80027fe:	bf00      	nop
 8002800:	cfff69f3 	.word	0xcfff69f3
 8002804:	40008000 	.word	0x40008000
 8002808:	40013800 	.word	0x40013800
 800280c:	40021000 	.word	0x40021000
 8002810:	40004400 	.word	0x40004400
 8002814:	40004800 	.word	0x40004800
 8002818:	40004c00 	.word	0x40004c00
 800281c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800282a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 812a 	beq.w	8002a88 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	4a9e      	ldr	r2, [pc, #632]	; (8002ab4 <UART_SetConfig+0x590>)
 800283a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800283e:	461a      	mov	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	fbb3 f3f2 	udiv	r3, r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d305      	bcc.n	8002864 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	429a      	cmp	r2, r3
 8002862:	d903      	bls.n	800286c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800286a:	e10d      	b.n	8002a88 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	2200      	movs	r2, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	60fa      	str	r2, [r7, #12]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	4a8e      	ldr	r2, [pc, #568]	; (8002ab4 <UART_SetConfig+0x590>)
 800287a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800287e:	b29b      	uxth	r3, r3
 8002880:	2200      	movs	r2, #0
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800288a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800288e:	f7fd fcc3 	bl	8000218 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	020b      	lsls	r3, r1, #8
 80028a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80028a8:	0202      	lsls	r2, r0, #8
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	6849      	ldr	r1, [r1, #4]
 80028ae:	0849      	lsrs	r1, r1, #1
 80028b0:	2000      	movs	r0, #0
 80028b2:	460c      	mov	r4, r1
 80028b4:	4605      	mov	r5, r0
 80028b6:	eb12 0804 	adds.w	r8, r2, r4
 80028ba:	eb43 0905 	adc.w	r9, r3, r5
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	469a      	mov	sl, r3
 80028c6:	4693      	mov	fp, r2
 80028c8:	4652      	mov	r2, sl
 80028ca:	465b      	mov	r3, fp
 80028cc:	4640      	mov	r0, r8
 80028ce:	4649      	mov	r1, r9
 80028d0:	f7fd fca2 	bl	8000218 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e2:	d308      	bcc.n	80028f6 <UART_SetConfig+0x3d2>
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ea:	d204      	bcs.n	80028f6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	e0c8      	b.n	8002a88 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80028fc:	e0c4      	b.n	8002a88 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002906:	d167      	bne.n	80029d8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800290c:	2b08      	cmp	r3, #8
 800290e:	d828      	bhi.n	8002962 <UART_SetConfig+0x43e>
 8002910:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <UART_SetConfig+0x3f4>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	0800293d 	.word	0x0800293d
 800291c:	08002945 	.word	0x08002945
 8002920:	0800294d 	.word	0x0800294d
 8002924:	08002963 	.word	0x08002963
 8002928:	08002953 	.word	0x08002953
 800292c:	08002963 	.word	0x08002963
 8002930:	08002963 	.word	0x08002963
 8002934:	08002963 	.word	0x08002963
 8002938:	0800295b 	.word	0x0800295b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800293c:	f7ff f9d6 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002942:	e014      	b.n	800296e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7ff f9e8 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800294a:	e010      	b.n	800296e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800294c:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <UART_SetConfig+0x594>)
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002950:	e00d      	b.n	800296e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002952:	f7ff f95d 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002958:	e009      	b.n	800296e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800295a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002960:	e005      	b.n	800296e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800296c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8089 	beq.w	8002a88 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <UART_SetConfig+0x590>)
 800297c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002980:	461a      	mov	r2, r3
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	fbb3 f3f2 	udiv	r3, r3, r2
 8002988:	005a      	lsls	r2, r3, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	441a      	add	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d916      	bls.n	80029d0 <UART_SetConfig+0x4ac>
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d212      	bcs.n	80029d0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f023 030f 	bic.w	r3, r3, #15
 80029b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	b29a      	uxth	r2, r3
 80029c0:	8bfb      	ldrh	r3, [r7, #30]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	8bfa      	ldrh	r2, [r7, #30]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	e05b      	b.n	8002a88 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029d6:	e057      	b.n	8002a88 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d828      	bhi.n	8002a32 <UART_SetConfig+0x50e>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <UART_SetConfig+0x4c4>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a0d 	.word	0x08002a0d
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	08002a1d 	.word	0x08002a1d
 80029f4:	08002a33 	.word	0x08002a33
 80029f8:	08002a23 	.word	0x08002a23
 80029fc:	08002a33 	.word	0x08002a33
 8002a00:	08002a33 	.word	0x08002a33
 8002a04:	08002a33 	.word	0x08002a33
 8002a08:	08002a2b 	.word	0x08002a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7ff f96e 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a12:	e014      	b.n	8002a3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7ff f980 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a1a:	e010      	b.n	8002a3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <UART_SetConfig+0x594>)
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a20:	e00d      	b.n	8002a3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a22:	f7ff f8f5 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a28:	e009      	b.n	8002a3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a30:	e005      	b.n	8002a3e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d021      	beq.n	8002a88 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <UART_SetConfig+0x590>)
 8002a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	441a      	add	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d909      	bls.n	8002a82 <UART_SetConfig+0x55e>
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d205      	bcs.n	8002a82 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	e002      	b.n	8002a88 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002aa4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3730      	adds	r7, #48	; 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08003a24 	.word	0x08003a24
 8002ab8:	00f42400 	.word	0x00f42400

08002abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01a      	beq.n	8002bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bba:	d10a      	bne.n	8002bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c10:	f7fe f86c 	bl	8000cec <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d10e      	bne.n	8002c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f82f 	bl	8002c96 <UART_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e025      	b.n	8002c8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d10e      	bne.n	8002c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f819 	bl	8002c96 <UART_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e00f      	b.n	8002c8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b09c      	sub	sp, #112	; 0x70
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca6:	e0a9      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cae:	f000 80a5 	beq.w	8002dfc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe f81b 	bl	8000cec <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d140      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e6      	bne.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	663b      	str	r3, [r7, #96]	; 0x60
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3308      	adds	r3, #8
 8002d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e5      	bne.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e069      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d051      	beq.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d66:	d149      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
 8002d92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e6      	bne.n	8002d72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3308      	adds	r3, #8
 8002daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	613b      	str	r3, [r7, #16]
   return(result);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dc4:	623a      	str	r2, [r7, #32]
 8002dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	69f9      	ldr	r1, [r7, #28]
 8002dca:	6a3a      	ldr	r2, [r7, #32]
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e5      	bne.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e010      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4013      	ands	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	f43f af46 	beq.w	8002ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3770      	adds	r7, #112	; 0x70
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UARTEx_DisableFifoMode+0x16>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e027      	b.n	8002e8c <HAL_UARTEx_DisableFifoMode+0x66>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	; 0x24
 8002e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e02d      	b.n	8002f0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f84f 	bl	8002f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e02d      	b.n	8002f88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f811 	bl	8002f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fb0:	e031      	b.n	8003016 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	0e5b      	lsrs	r3, r3, #25
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	0f5b      	lsrs	r3, r3, #29
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fda:	7bbb      	ldrb	r3, [r7, #14]
 8002fdc:	7b3a      	ldrb	r2, [r7, #12]
 8002fde:	4911      	ldr	r1, [pc, #68]	; (8003024 <UARTEx_SetNbDataToProcess+0x94>)
 8002fe0:	5c8a      	ldrb	r2, [r1, r2]
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fe6:	7b3a      	ldrb	r2, [r7, #12]
 8002fe8:	490f      	ldr	r1, [pc, #60]	; (8003028 <UARTEx_SetNbDataToProcess+0x98>)
 8002fea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fec:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	7b7a      	ldrb	r2, [r7, #13]
 8002ffc:	4909      	ldr	r1, [pc, #36]	; (8003024 <UARTEx_SetNbDataToProcess+0x94>)
 8002ffe:	5c8a      	ldrb	r2, [r1, r2]
 8003000:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003004:	7b7a      	ldrb	r2, [r7, #13]
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <UARTEx_SetNbDataToProcess+0x98>)
 8003008:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800300a:	fb93 f3f2 	sdiv	r3, r3, r2
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	08003a3c 	.word	0x08003a3c
 8003028:	08003a44 	.word	0x08003a44

0800302c <std>:
 800302c:	2300      	movs	r3, #0
 800302e:	b510      	push	{r4, lr}
 8003030:	4604      	mov	r4, r0
 8003032:	e9c0 3300 	strd	r3, r3, [r0]
 8003036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800303a:	6083      	str	r3, [r0, #8]
 800303c:	8181      	strh	r1, [r0, #12]
 800303e:	6643      	str	r3, [r0, #100]	; 0x64
 8003040:	81c2      	strh	r2, [r0, #14]
 8003042:	6183      	str	r3, [r0, #24]
 8003044:	4619      	mov	r1, r3
 8003046:	2208      	movs	r2, #8
 8003048:	305c      	adds	r0, #92	; 0x5c
 800304a:	f000 f90d 	bl	8003268 <memset>
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <std+0x58>)
 8003050:	6263      	str	r3, [r4, #36]	; 0x24
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <std+0x5c>)
 8003054:	62a3      	str	r3, [r4, #40]	; 0x28
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <std+0x60>)
 8003058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <std+0x64>)
 800305c:	6323      	str	r3, [r4, #48]	; 0x30
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <std+0x68>)
 8003060:	6224      	str	r4, [r4, #32]
 8003062:	429c      	cmp	r4, r3
 8003064:	d006      	beq.n	8003074 <std+0x48>
 8003066:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800306a:	4294      	cmp	r4, r2
 800306c:	d002      	beq.n	8003074 <std+0x48>
 800306e:	33d0      	adds	r3, #208	; 0xd0
 8003070:	429c      	cmp	r4, r3
 8003072:	d105      	bne.n	8003080 <std+0x54>
 8003074:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800307c:	f000 b926 	b.w	80032cc <__retarget_lock_init_recursive>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	bf00      	nop
 8003084:	08003589 	.word	0x08003589
 8003088:	080035ab 	.word	0x080035ab
 800308c:	080035e3 	.word	0x080035e3
 8003090:	08003607 	.word	0x08003607
 8003094:	200001bc 	.word	0x200001bc

08003098 <stdio_exit_handler>:
 8003098:	4a02      	ldr	r2, [pc, #8]	; (80030a4 <stdio_exit_handler+0xc>)
 800309a:	4903      	ldr	r1, [pc, #12]	; (80030a8 <stdio_exit_handler+0x10>)
 800309c:	4803      	ldr	r0, [pc, #12]	; (80030ac <stdio_exit_handler+0x14>)
 800309e:	f000 b869 	b.w	8003174 <_fwalk_sglue>
 80030a2:	bf00      	nop
 80030a4:	2000000c 	.word	0x2000000c
 80030a8:	08003521 	.word	0x08003521
 80030ac:	20000018 	.word	0x20000018

080030b0 <cleanup_stdio>:
 80030b0:	6841      	ldr	r1, [r0, #4]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <cleanup_stdio+0x34>)
 80030b4:	4299      	cmp	r1, r3
 80030b6:	b510      	push	{r4, lr}
 80030b8:	4604      	mov	r4, r0
 80030ba:	d001      	beq.n	80030c0 <cleanup_stdio+0x10>
 80030bc:	f000 fa30 	bl	8003520 <_fflush_r>
 80030c0:	68a1      	ldr	r1, [r4, #8]
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <cleanup_stdio+0x38>)
 80030c4:	4299      	cmp	r1, r3
 80030c6:	d002      	beq.n	80030ce <cleanup_stdio+0x1e>
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 fa29 	bl	8003520 <_fflush_r>
 80030ce:	68e1      	ldr	r1, [r4, #12]
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <cleanup_stdio+0x3c>)
 80030d2:	4299      	cmp	r1, r3
 80030d4:	d004      	beq.n	80030e0 <cleanup_stdio+0x30>
 80030d6:	4620      	mov	r0, r4
 80030d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030dc:	f000 ba20 	b.w	8003520 <_fflush_r>
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	bf00      	nop
 80030e4:	200001bc 	.word	0x200001bc
 80030e8:	20000224 	.word	0x20000224
 80030ec:	2000028c 	.word	0x2000028c

080030f0 <global_stdio_init.part.0>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <global_stdio_init.part.0+0x30>)
 80030f4:	4c0b      	ldr	r4, [pc, #44]	; (8003124 <global_stdio_init.part.0+0x34>)
 80030f6:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <global_stdio_init.part.0+0x38>)
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	4620      	mov	r0, r4
 80030fc:	2200      	movs	r2, #0
 80030fe:	2104      	movs	r1, #4
 8003100:	f7ff ff94 	bl	800302c <std>
 8003104:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003108:	2201      	movs	r2, #1
 800310a:	2109      	movs	r1, #9
 800310c:	f7ff ff8e 	bl	800302c <std>
 8003110:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003114:	2202      	movs	r2, #2
 8003116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800311a:	2112      	movs	r1, #18
 800311c:	f7ff bf86 	b.w	800302c <std>
 8003120:	200002f4 	.word	0x200002f4
 8003124:	200001bc 	.word	0x200001bc
 8003128:	08003099 	.word	0x08003099

0800312c <__sfp_lock_acquire>:
 800312c:	4801      	ldr	r0, [pc, #4]	; (8003134 <__sfp_lock_acquire+0x8>)
 800312e:	f000 b8ce 	b.w	80032ce <__retarget_lock_acquire_recursive>
 8003132:	bf00      	nop
 8003134:	200002f9 	.word	0x200002f9

08003138 <__sfp_lock_release>:
 8003138:	4801      	ldr	r0, [pc, #4]	; (8003140 <__sfp_lock_release+0x8>)
 800313a:	f000 b8c9 	b.w	80032d0 <__retarget_lock_release_recursive>
 800313e:	bf00      	nop
 8003140:	200002f9 	.word	0x200002f9

08003144 <__sinit>:
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
 8003148:	f7ff fff0 	bl	800312c <__sfp_lock_acquire>
 800314c:	6a23      	ldr	r3, [r4, #32]
 800314e:	b11b      	cbz	r3, 8003158 <__sinit+0x14>
 8003150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003154:	f7ff bff0 	b.w	8003138 <__sfp_lock_release>
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__sinit+0x28>)
 800315a:	6223      	str	r3, [r4, #32]
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <__sinit+0x2c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f5      	bne.n	8003150 <__sinit+0xc>
 8003164:	f7ff ffc4 	bl	80030f0 <global_stdio_init.part.0>
 8003168:	e7f2      	b.n	8003150 <__sinit+0xc>
 800316a:	bf00      	nop
 800316c:	080030b1 	.word	0x080030b1
 8003170:	200002f4 	.word	0x200002f4

08003174 <_fwalk_sglue>:
 8003174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003178:	4607      	mov	r7, r0
 800317a:	4688      	mov	r8, r1
 800317c:	4614      	mov	r4, r2
 800317e:	2600      	movs	r6, #0
 8003180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003184:	f1b9 0901 	subs.w	r9, r9, #1
 8003188:	d505      	bpl.n	8003196 <_fwalk_sglue+0x22>
 800318a:	6824      	ldr	r4, [r4, #0]
 800318c:	2c00      	cmp	r4, #0
 800318e:	d1f7      	bne.n	8003180 <_fwalk_sglue+0xc>
 8003190:	4630      	mov	r0, r6
 8003192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003196:	89ab      	ldrh	r3, [r5, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d907      	bls.n	80031ac <_fwalk_sglue+0x38>
 800319c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a0:	3301      	adds	r3, #1
 80031a2:	d003      	beq.n	80031ac <_fwalk_sglue+0x38>
 80031a4:	4629      	mov	r1, r5
 80031a6:	4638      	mov	r0, r7
 80031a8:	47c0      	blx	r8
 80031aa:	4306      	orrs	r6, r0
 80031ac:	3568      	adds	r5, #104	; 0x68
 80031ae:	e7e9      	b.n	8003184 <_fwalk_sglue+0x10>

080031b0 <_puts_r>:
 80031b0:	6a03      	ldr	r3, [r0, #32]
 80031b2:	b570      	push	{r4, r5, r6, lr}
 80031b4:	6884      	ldr	r4, [r0, #8]
 80031b6:	4605      	mov	r5, r0
 80031b8:	460e      	mov	r6, r1
 80031ba:	b90b      	cbnz	r3, 80031c0 <_puts_r+0x10>
 80031bc:	f7ff ffc2 	bl	8003144 <__sinit>
 80031c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031c2:	07db      	lsls	r3, r3, #31
 80031c4:	d405      	bmi.n	80031d2 <_puts_r+0x22>
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	0598      	lsls	r0, r3, #22
 80031ca:	d402      	bmi.n	80031d2 <_puts_r+0x22>
 80031cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ce:	f000 f87e 	bl	80032ce <__retarget_lock_acquire_recursive>
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	0719      	lsls	r1, r3, #28
 80031d6:	d513      	bpl.n	8003200 <_puts_r+0x50>
 80031d8:	6923      	ldr	r3, [r4, #16]
 80031da:	b18b      	cbz	r3, 8003200 <_puts_r+0x50>
 80031dc:	3e01      	subs	r6, #1
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031e4:	3b01      	subs	r3, #1
 80031e6:	60a3      	str	r3, [r4, #8]
 80031e8:	b9e9      	cbnz	r1, 8003226 <_puts_r+0x76>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da2e      	bge.n	800324c <_puts_r+0x9c>
 80031ee:	4622      	mov	r2, r4
 80031f0:	210a      	movs	r1, #10
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 fa0b 	bl	800360e <__swbuf_r>
 80031f8:	3001      	adds	r0, #1
 80031fa:	d007      	beq.n	800320c <_puts_r+0x5c>
 80031fc:	250a      	movs	r5, #10
 80031fe:	e007      	b.n	8003210 <_puts_r+0x60>
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f000 fa40 	bl	8003688 <__swsetup_r>
 8003208:	2800      	cmp	r0, #0
 800320a:	d0e7      	beq.n	80031dc <_puts_r+0x2c>
 800320c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003212:	07da      	lsls	r2, r3, #31
 8003214:	d405      	bmi.n	8003222 <_puts_r+0x72>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	059b      	lsls	r3, r3, #22
 800321a:	d402      	bmi.n	8003222 <_puts_r+0x72>
 800321c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800321e:	f000 f857 	bl	80032d0 <__retarget_lock_release_recursive>
 8003222:	4628      	mov	r0, r5
 8003224:	bd70      	pop	{r4, r5, r6, pc}
 8003226:	2b00      	cmp	r3, #0
 8003228:	da04      	bge.n	8003234 <_puts_r+0x84>
 800322a:	69a2      	ldr	r2, [r4, #24]
 800322c:	429a      	cmp	r2, r3
 800322e:	dc06      	bgt.n	800323e <_puts_r+0x8e>
 8003230:	290a      	cmp	r1, #10
 8003232:	d004      	beq.n	800323e <_puts_r+0x8e>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	6022      	str	r2, [r4, #0]
 800323a:	7019      	strb	r1, [r3, #0]
 800323c:	e7cf      	b.n	80031de <_puts_r+0x2e>
 800323e:	4622      	mov	r2, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f000 f9e4 	bl	800360e <__swbuf_r>
 8003246:	3001      	adds	r0, #1
 8003248:	d1c9      	bne.n	80031de <_puts_r+0x2e>
 800324a:	e7df      	b.n	800320c <_puts_r+0x5c>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	250a      	movs	r5, #10
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	6022      	str	r2, [r4, #0]
 8003254:	701d      	strb	r5, [r3, #0]
 8003256:	e7db      	b.n	8003210 <_puts_r+0x60>

08003258 <puts>:
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <puts+0xc>)
 800325a:	4601      	mov	r1, r0
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f7ff bfa7 	b.w	80031b0 <_puts_r>
 8003262:	bf00      	nop
 8003264:	20000064 	.word	0x20000064

08003268 <memset>:
 8003268:	4402      	add	r2, r0
 800326a:	4603      	mov	r3, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <__errno>:
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <__errno+0x8>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000064 	.word	0x20000064

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4d0d      	ldr	r5, [pc, #52]	; (80032bc <__libc_init_array+0x38>)
 8003288:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328a:	1b64      	subs	r4, r4, r5
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	2600      	movs	r6, #0
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	4d0b      	ldr	r5, [pc, #44]	; (80032c4 <__libc_init_array+0x40>)
 8003296:	4c0c      	ldr	r4, [pc, #48]	; (80032c8 <__libc_init_array+0x44>)
 8003298:	f000 fb74 	bl	8003984 <_init>
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	2600      	movs	r6, #0
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003a54 	.word	0x08003a54
 80032c0:	08003a54 	.word	0x08003a54
 80032c4:	08003a54 	.word	0x08003a54
 80032c8:	08003a58 	.word	0x08003a58

080032cc <__retarget_lock_init_recursive>:
 80032cc:	4770      	bx	lr

080032ce <__retarget_lock_acquire_recursive>:
 80032ce:	4770      	bx	lr

080032d0 <__retarget_lock_release_recursive>:
 80032d0:	4770      	bx	lr
	...

080032d4 <sbrk_aligned>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4e0e      	ldr	r6, [pc, #56]	; (8003310 <sbrk_aligned+0x3c>)
 80032d8:	460c      	mov	r4, r1
 80032da:	6831      	ldr	r1, [r6, #0]
 80032dc:	4605      	mov	r5, r0
 80032de:	b911      	cbnz	r1, 80032e6 <sbrk_aligned+0x12>
 80032e0:	f000 fae2 	bl	80038a8 <_sbrk_r>
 80032e4:	6030      	str	r0, [r6, #0]
 80032e6:	4621      	mov	r1, r4
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 fadd 	bl	80038a8 <_sbrk_r>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	d00a      	beq.n	8003308 <sbrk_aligned+0x34>
 80032f2:	1cc4      	adds	r4, r0, #3
 80032f4:	f024 0403 	bic.w	r4, r4, #3
 80032f8:	42a0      	cmp	r0, r4
 80032fa:	d007      	beq.n	800330c <sbrk_aligned+0x38>
 80032fc:	1a21      	subs	r1, r4, r0
 80032fe:	4628      	mov	r0, r5
 8003300:	f000 fad2 	bl	80038a8 <_sbrk_r>
 8003304:	3001      	adds	r0, #1
 8003306:	d101      	bne.n	800330c <sbrk_aligned+0x38>
 8003308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800330c:	4620      	mov	r0, r4
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	20000300 	.word	0x20000300

08003314 <_malloc_r>:
 8003314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003318:	1ccd      	adds	r5, r1, #3
 800331a:	f025 0503 	bic.w	r5, r5, #3
 800331e:	3508      	adds	r5, #8
 8003320:	2d0c      	cmp	r5, #12
 8003322:	bf38      	it	cc
 8003324:	250c      	movcc	r5, #12
 8003326:	2d00      	cmp	r5, #0
 8003328:	4607      	mov	r7, r0
 800332a:	db01      	blt.n	8003330 <_malloc_r+0x1c>
 800332c:	42a9      	cmp	r1, r5
 800332e:	d905      	bls.n	800333c <_malloc_r+0x28>
 8003330:	230c      	movs	r3, #12
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	2600      	movs	r6, #0
 8003336:	4630      	mov	r0, r6
 8003338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800333c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003410 <_malloc_r+0xfc>
 8003340:	f000 f916 	bl	8003570 <__malloc_lock>
 8003344:	f8d8 3000 	ldr.w	r3, [r8]
 8003348:	461c      	mov	r4, r3
 800334a:	bb5c      	cbnz	r4, 80033a4 <_malloc_r+0x90>
 800334c:	4629      	mov	r1, r5
 800334e:	4638      	mov	r0, r7
 8003350:	f7ff ffc0 	bl	80032d4 <sbrk_aligned>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	4604      	mov	r4, r0
 8003358:	d155      	bne.n	8003406 <_malloc_r+0xf2>
 800335a:	f8d8 4000 	ldr.w	r4, [r8]
 800335e:	4626      	mov	r6, r4
 8003360:	2e00      	cmp	r6, #0
 8003362:	d145      	bne.n	80033f0 <_malloc_r+0xdc>
 8003364:	2c00      	cmp	r4, #0
 8003366:	d048      	beq.n	80033fa <_malloc_r+0xe6>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	4631      	mov	r1, r6
 800336c:	4638      	mov	r0, r7
 800336e:	eb04 0903 	add.w	r9, r4, r3
 8003372:	f000 fa99 	bl	80038a8 <_sbrk_r>
 8003376:	4581      	cmp	r9, r0
 8003378:	d13f      	bne.n	80033fa <_malloc_r+0xe6>
 800337a:	6821      	ldr	r1, [r4, #0]
 800337c:	1a6d      	subs	r5, r5, r1
 800337e:	4629      	mov	r1, r5
 8003380:	4638      	mov	r0, r7
 8003382:	f7ff ffa7 	bl	80032d4 <sbrk_aligned>
 8003386:	3001      	adds	r0, #1
 8003388:	d037      	beq.n	80033fa <_malloc_r+0xe6>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	442b      	add	r3, r5
 800338e:	6023      	str	r3, [r4, #0]
 8003390:	f8d8 3000 	ldr.w	r3, [r8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d038      	beq.n	800340a <_malloc_r+0xf6>
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	42a2      	cmp	r2, r4
 800339c:	d12b      	bne.n	80033f6 <_malloc_r+0xe2>
 800339e:	2200      	movs	r2, #0
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e00f      	b.n	80033c4 <_malloc_r+0xb0>
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	1b52      	subs	r2, r2, r5
 80033a8:	d41f      	bmi.n	80033ea <_malloc_r+0xd6>
 80033aa:	2a0b      	cmp	r2, #11
 80033ac:	d917      	bls.n	80033de <_malloc_r+0xca>
 80033ae:	1961      	adds	r1, r4, r5
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	6025      	str	r5, [r4, #0]
 80033b4:	bf18      	it	ne
 80033b6:	6059      	strne	r1, [r3, #4]
 80033b8:	6863      	ldr	r3, [r4, #4]
 80033ba:	bf08      	it	eq
 80033bc:	f8c8 1000 	streq.w	r1, [r8]
 80033c0:	5162      	str	r2, [r4, r5]
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	4638      	mov	r0, r7
 80033c6:	f104 060b 	add.w	r6, r4, #11
 80033ca:	f000 f8d7 	bl	800357c <__malloc_unlock>
 80033ce:	f026 0607 	bic.w	r6, r6, #7
 80033d2:	1d23      	adds	r3, r4, #4
 80033d4:	1af2      	subs	r2, r6, r3
 80033d6:	d0ae      	beq.n	8003336 <_malloc_r+0x22>
 80033d8:	1b9b      	subs	r3, r3, r6
 80033da:	50a3      	str	r3, [r4, r2]
 80033dc:	e7ab      	b.n	8003336 <_malloc_r+0x22>
 80033de:	42a3      	cmp	r3, r4
 80033e0:	6862      	ldr	r2, [r4, #4]
 80033e2:	d1dd      	bne.n	80033a0 <_malloc_r+0x8c>
 80033e4:	f8c8 2000 	str.w	r2, [r8]
 80033e8:	e7ec      	b.n	80033c4 <_malloc_r+0xb0>
 80033ea:	4623      	mov	r3, r4
 80033ec:	6864      	ldr	r4, [r4, #4]
 80033ee:	e7ac      	b.n	800334a <_malloc_r+0x36>
 80033f0:	4634      	mov	r4, r6
 80033f2:	6876      	ldr	r6, [r6, #4]
 80033f4:	e7b4      	b.n	8003360 <_malloc_r+0x4c>
 80033f6:	4613      	mov	r3, r2
 80033f8:	e7cc      	b.n	8003394 <_malloc_r+0x80>
 80033fa:	230c      	movs	r3, #12
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4638      	mov	r0, r7
 8003400:	f000 f8bc 	bl	800357c <__malloc_unlock>
 8003404:	e797      	b.n	8003336 <_malloc_r+0x22>
 8003406:	6025      	str	r5, [r4, #0]
 8003408:	e7dc      	b.n	80033c4 <_malloc_r+0xb0>
 800340a:	605b      	str	r3, [r3, #4]
 800340c:	deff      	udf	#255	; 0xff
 800340e:	bf00      	nop
 8003410:	200002fc 	.word	0x200002fc

08003414 <__sflush_r>:
 8003414:	898a      	ldrh	r2, [r1, #12]
 8003416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800341a:	4605      	mov	r5, r0
 800341c:	0710      	lsls	r0, r2, #28
 800341e:	460c      	mov	r4, r1
 8003420:	d458      	bmi.n	80034d4 <__sflush_r+0xc0>
 8003422:	684b      	ldr	r3, [r1, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	dc05      	bgt.n	8003434 <__sflush_r+0x20>
 8003428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	dc02      	bgt.n	8003434 <__sflush_r+0x20>
 800342e:	2000      	movs	r0, #0
 8003430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003436:	2e00      	cmp	r6, #0
 8003438:	d0f9      	beq.n	800342e <__sflush_r+0x1a>
 800343a:	2300      	movs	r3, #0
 800343c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003440:	682f      	ldr	r7, [r5, #0]
 8003442:	6a21      	ldr	r1, [r4, #32]
 8003444:	602b      	str	r3, [r5, #0]
 8003446:	d032      	beq.n	80034ae <__sflush_r+0x9a>
 8003448:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	075a      	lsls	r2, r3, #29
 800344e:	d505      	bpl.n	800345c <__sflush_r+0x48>
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	1ac0      	subs	r0, r0, r3
 8003454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003456:	b10b      	cbz	r3, 800345c <__sflush_r+0x48>
 8003458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800345a:	1ac0      	subs	r0, r0, r3
 800345c:	2300      	movs	r3, #0
 800345e:	4602      	mov	r2, r0
 8003460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003462:	6a21      	ldr	r1, [r4, #32]
 8003464:	4628      	mov	r0, r5
 8003466:	47b0      	blx	r6
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	d106      	bne.n	800347c <__sflush_r+0x68>
 800346e:	6829      	ldr	r1, [r5, #0]
 8003470:	291d      	cmp	r1, #29
 8003472:	d82b      	bhi.n	80034cc <__sflush_r+0xb8>
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <__sflush_r+0x108>)
 8003476:	410a      	asrs	r2, r1
 8003478:	07d6      	lsls	r6, r2, #31
 800347a:	d427      	bmi.n	80034cc <__sflush_r+0xb8>
 800347c:	2200      	movs	r2, #0
 800347e:	6062      	str	r2, [r4, #4]
 8003480:	04d9      	lsls	r1, r3, #19
 8003482:	6922      	ldr	r2, [r4, #16]
 8003484:	6022      	str	r2, [r4, #0]
 8003486:	d504      	bpl.n	8003492 <__sflush_r+0x7e>
 8003488:	1c42      	adds	r2, r0, #1
 800348a:	d101      	bne.n	8003490 <__sflush_r+0x7c>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	b903      	cbnz	r3, 8003492 <__sflush_r+0x7e>
 8003490:	6560      	str	r0, [r4, #84]	; 0x54
 8003492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003494:	602f      	str	r7, [r5, #0]
 8003496:	2900      	cmp	r1, #0
 8003498:	d0c9      	beq.n	800342e <__sflush_r+0x1a>
 800349a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800349e:	4299      	cmp	r1, r3
 80034a0:	d002      	beq.n	80034a8 <__sflush_r+0x94>
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 fa22 	bl	80038ec <_free_r>
 80034a8:	2000      	movs	r0, #0
 80034aa:	6360      	str	r0, [r4, #52]	; 0x34
 80034ac:	e7c0      	b.n	8003430 <__sflush_r+0x1c>
 80034ae:	2301      	movs	r3, #1
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b0      	blx	r6
 80034b4:	1c41      	adds	r1, r0, #1
 80034b6:	d1c8      	bne.n	800344a <__sflush_r+0x36>
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0c5      	beq.n	800344a <__sflush_r+0x36>
 80034be:	2b1d      	cmp	r3, #29
 80034c0:	d001      	beq.n	80034c6 <__sflush_r+0xb2>
 80034c2:	2b16      	cmp	r3, #22
 80034c4:	d101      	bne.n	80034ca <__sflush_r+0xb6>
 80034c6:	602f      	str	r7, [r5, #0]
 80034c8:	e7b1      	b.n	800342e <__sflush_r+0x1a>
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d0:	81a3      	strh	r3, [r4, #12]
 80034d2:	e7ad      	b.n	8003430 <__sflush_r+0x1c>
 80034d4:	690f      	ldr	r7, [r1, #16]
 80034d6:	2f00      	cmp	r7, #0
 80034d8:	d0a9      	beq.n	800342e <__sflush_r+0x1a>
 80034da:	0793      	lsls	r3, r2, #30
 80034dc:	680e      	ldr	r6, [r1, #0]
 80034de:	bf08      	it	eq
 80034e0:	694b      	ldreq	r3, [r1, #20]
 80034e2:	600f      	str	r7, [r1, #0]
 80034e4:	bf18      	it	ne
 80034e6:	2300      	movne	r3, #0
 80034e8:	eba6 0807 	sub.w	r8, r6, r7
 80034ec:	608b      	str	r3, [r1, #8]
 80034ee:	f1b8 0f00 	cmp.w	r8, #0
 80034f2:	dd9c      	ble.n	800342e <__sflush_r+0x1a>
 80034f4:	6a21      	ldr	r1, [r4, #32]
 80034f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034f8:	4643      	mov	r3, r8
 80034fa:	463a      	mov	r2, r7
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b0      	blx	r6
 8003500:	2800      	cmp	r0, #0
 8003502:	dc06      	bgt.n	8003512 <__sflush_r+0xfe>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350a:	81a3      	strh	r3, [r4, #12]
 800350c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003510:	e78e      	b.n	8003430 <__sflush_r+0x1c>
 8003512:	4407      	add	r7, r0
 8003514:	eba8 0800 	sub.w	r8, r8, r0
 8003518:	e7e9      	b.n	80034ee <__sflush_r+0xda>
 800351a:	bf00      	nop
 800351c:	dfbffffe 	.word	0xdfbffffe

08003520 <_fflush_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	690b      	ldr	r3, [r1, #16]
 8003524:	4605      	mov	r5, r0
 8003526:	460c      	mov	r4, r1
 8003528:	b913      	cbnz	r3, 8003530 <_fflush_r+0x10>
 800352a:	2500      	movs	r5, #0
 800352c:	4628      	mov	r0, r5
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	b118      	cbz	r0, 800353a <_fflush_r+0x1a>
 8003532:	6a03      	ldr	r3, [r0, #32]
 8003534:	b90b      	cbnz	r3, 800353a <_fflush_r+0x1a>
 8003536:	f7ff fe05 	bl	8003144 <__sinit>
 800353a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f3      	beq.n	800352a <_fflush_r+0xa>
 8003542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003544:	07d0      	lsls	r0, r2, #31
 8003546:	d404      	bmi.n	8003552 <_fflush_r+0x32>
 8003548:	0599      	lsls	r1, r3, #22
 800354a:	d402      	bmi.n	8003552 <_fflush_r+0x32>
 800354c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354e:	f7ff febe 	bl	80032ce <__retarget_lock_acquire_recursive>
 8003552:	4628      	mov	r0, r5
 8003554:	4621      	mov	r1, r4
 8003556:	f7ff ff5d 	bl	8003414 <__sflush_r>
 800355a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800355c:	07da      	lsls	r2, r3, #31
 800355e:	4605      	mov	r5, r0
 8003560:	d4e4      	bmi.n	800352c <_fflush_r+0xc>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	059b      	lsls	r3, r3, #22
 8003566:	d4e1      	bmi.n	800352c <_fflush_r+0xc>
 8003568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356a:	f7ff feb1 	bl	80032d0 <__retarget_lock_release_recursive>
 800356e:	e7dd      	b.n	800352c <_fflush_r+0xc>

08003570 <__malloc_lock>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__malloc_lock+0x8>)
 8003572:	f7ff beac 	b.w	80032ce <__retarget_lock_acquire_recursive>
 8003576:	bf00      	nop
 8003578:	200002f8 	.word	0x200002f8

0800357c <__malloc_unlock>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__malloc_unlock+0x8>)
 800357e:	f7ff bea7 	b.w	80032d0 <__retarget_lock_release_recursive>
 8003582:	bf00      	nop
 8003584:	200002f8 	.word	0x200002f8

08003588 <__sread>:
 8003588:	b510      	push	{r4, lr}
 800358a:	460c      	mov	r4, r1
 800358c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003590:	f000 f978 	bl	8003884 <_read_r>
 8003594:	2800      	cmp	r0, #0
 8003596:	bfab      	itete	ge
 8003598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800359a:	89a3      	ldrhlt	r3, [r4, #12]
 800359c:	181b      	addge	r3, r3, r0
 800359e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035a2:	bfac      	ite	ge
 80035a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035a6:	81a3      	strhlt	r3, [r4, #12]
 80035a8:	bd10      	pop	{r4, pc}

080035aa <__swrite>:
 80035aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	461f      	mov	r7, r3
 80035b0:	898b      	ldrh	r3, [r1, #12]
 80035b2:	05db      	lsls	r3, r3, #23
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	4616      	mov	r6, r2
 80035ba:	d505      	bpl.n	80035c8 <__swrite+0x1e>
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	2302      	movs	r3, #2
 80035c2:	2200      	movs	r2, #0
 80035c4:	f000 f94c 	bl	8003860 <_lseek_r>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	4632      	mov	r2, r6
 80035d6:	463b      	mov	r3, r7
 80035d8:	4628      	mov	r0, r5
 80035da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035de:	f000 b973 	b.w	80038c8 <_write_r>

080035e2 <__sseek>:
 80035e2:	b510      	push	{r4, lr}
 80035e4:	460c      	mov	r4, r1
 80035e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ea:	f000 f939 	bl	8003860 <_lseek_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	bf15      	itete	ne
 80035f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035fe:	81a3      	strheq	r3, [r4, #12]
 8003600:	bf18      	it	ne
 8003602:	81a3      	strhne	r3, [r4, #12]
 8003604:	bd10      	pop	{r4, pc}

08003606 <__sclose>:
 8003606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800360a:	f000 b8f7 	b.w	80037fc <_close_r>

0800360e <__swbuf_r>:
 800360e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003610:	460e      	mov	r6, r1
 8003612:	4614      	mov	r4, r2
 8003614:	4605      	mov	r5, r0
 8003616:	b118      	cbz	r0, 8003620 <__swbuf_r+0x12>
 8003618:	6a03      	ldr	r3, [r0, #32]
 800361a:	b90b      	cbnz	r3, 8003620 <__swbuf_r+0x12>
 800361c:	f7ff fd92 	bl	8003144 <__sinit>
 8003620:	69a3      	ldr	r3, [r4, #24]
 8003622:	60a3      	str	r3, [r4, #8]
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	071a      	lsls	r2, r3, #28
 8003628:	d525      	bpl.n	8003676 <__swbuf_r+0x68>
 800362a:	6923      	ldr	r3, [r4, #16]
 800362c:	b31b      	cbz	r3, 8003676 <__swbuf_r+0x68>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	6922      	ldr	r2, [r4, #16]
 8003632:	1a98      	subs	r0, r3, r2
 8003634:	6963      	ldr	r3, [r4, #20]
 8003636:	b2f6      	uxtb	r6, r6
 8003638:	4283      	cmp	r3, r0
 800363a:	4637      	mov	r7, r6
 800363c:	dc04      	bgt.n	8003648 <__swbuf_r+0x3a>
 800363e:	4621      	mov	r1, r4
 8003640:	4628      	mov	r0, r5
 8003642:	f7ff ff6d 	bl	8003520 <_fflush_r>
 8003646:	b9e0      	cbnz	r0, 8003682 <__swbuf_r+0x74>
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	3b01      	subs	r3, #1
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	6022      	str	r2, [r4, #0]
 8003654:	701e      	strb	r6, [r3, #0]
 8003656:	6962      	ldr	r2, [r4, #20]
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	429a      	cmp	r2, r3
 800365c:	d004      	beq.n	8003668 <__swbuf_r+0x5a>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d506      	bpl.n	8003672 <__swbuf_r+0x64>
 8003664:	2e0a      	cmp	r6, #10
 8003666:	d104      	bne.n	8003672 <__swbuf_r+0x64>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f7ff ff58 	bl	8003520 <_fflush_r>
 8003670:	b938      	cbnz	r0, 8003682 <__swbuf_r+0x74>
 8003672:	4638      	mov	r0, r7
 8003674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003676:	4621      	mov	r1, r4
 8003678:	4628      	mov	r0, r5
 800367a:	f000 f805 	bl	8003688 <__swsetup_r>
 800367e:	2800      	cmp	r0, #0
 8003680:	d0d5      	beq.n	800362e <__swbuf_r+0x20>
 8003682:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003686:	e7f4      	b.n	8003672 <__swbuf_r+0x64>

08003688 <__swsetup_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <__swsetup_r+0xac>)
 800368c:	4605      	mov	r5, r0
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	460c      	mov	r4, r1
 8003692:	b118      	cbz	r0, 800369c <__swsetup_r+0x14>
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b90b      	cbnz	r3, 800369c <__swsetup_r+0x14>
 8003698:	f7ff fd54 	bl	8003144 <__sinit>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036a2:	0718      	lsls	r0, r3, #28
 80036a4:	d422      	bmi.n	80036ec <__swsetup_r+0x64>
 80036a6:	06d9      	lsls	r1, r3, #27
 80036a8:	d407      	bmi.n	80036ba <__swsetup_r+0x32>
 80036aa:	2309      	movs	r3, #9
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b8:	e034      	b.n	8003724 <__swsetup_r+0x9c>
 80036ba:	0758      	lsls	r0, r3, #29
 80036bc:	d512      	bpl.n	80036e4 <__swsetup_r+0x5c>
 80036be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c0:	b141      	cbz	r1, 80036d4 <__swsetup_r+0x4c>
 80036c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c6:	4299      	cmp	r1, r3
 80036c8:	d002      	beq.n	80036d0 <__swsetup_r+0x48>
 80036ca:	4628      	mov	r0, r5
 80036cc:	f000 f90e 	bl	80038ec <_free_r>
 80036d0:	2300      	movs	r3, #0
 80036d2:	6363      	str	r3, [r4, #52]	; 0x34
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	2300      	movs	r3, #0
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f043 0308 	orr.w	r3, r3, #8
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	b94b      	cbnz	r3, 8003704 <__swsetup_r+0x7c>
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fa:	d003      	beq.n	8003704 <__swsetup_r+0x7c>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f840 	bl	8003784 <__smakebuf_r>
 8003704:	89a0      	ldrh	r0, [r4, #12]
 8003706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800370a:	f010 0301 	ands.w	r3, r0, #1
 800370e:	d00a      	beq.n	8003726 <__swsetup_r+0x9e>
 8003710:	2300      	movs	r3, #0
 8003712:	60a3      	str	r3, [r4, #8]
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	425b      	negs	r3, r3
 8003718:	61a3      	str	r3, [r4, #24]
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	b943      	cbnz	r3, 8003730 <__swsetup_r+0xa8>
 800371e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003722:	d1c4      	bne.n	80036ae <__swsetup_r+0x26>
 8003724:	bd38      	pop	{r3, r4, r5, pc}
 8003726:	0781      	lsls	r1, r0, #30
 8003728:	bf58      	it	pl
 800372a:	6963      	ldrpl	r3, [r4, #20]
 800372c:	60a3      	str	r3, [r4, #8]
 800372e:	e7f4      	b.n	800371a <__swsetup_r+0x92>
 8003730:	2000      	movs	r0, #0
 8003732:	e7f7      	b.n	8003724 <__swsetup_r+0x9c>
 8003734:	20000064 	.word	0x20000064

08003738 <__swhatbuf_r>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	460c      	mov	r4, r1
 800373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003740:	2900      	cmp	r1, #0
 8003742:	b096      	sub	sp, #88	; 0x58
 8003744:	4615      	mov	r5, r2
 8003746:	461e      	mov	r6, r3
 8003748:	da0d      	bge.n	8003766 <__swhatbuf_r+0x2e>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	bf0c      	ite	eq
 8003756:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800375a:	2340      	movne	r3, #64	; 0x40
 800375c:	2000      	movs	r0, #0
 800375e:	6031      	str	r1, [r6, #0]
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	b016      	add	sp, #88	; 0x58
 8003764:	bd70      	pop	{r4, r5, r6, pc}
 8003766:	466a      	mov	r2, sp
 8003768:	f000 f858 	bl	800381c <_fstat_r>
 800376c:	2800      	cmp	r0, #0
 800376e:	dbec      	blt.n	800374a <__swhatbuf_r+0x12>
 8003770:	9901      	ldr	r1, [sp, #4]
 8003772:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003776:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800377a:	4259      	negs	r1, r3
 800377c:	4159      	adcs	r1, r3
 800377e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003782:	e7eb      	b.n	800375c <__swhatbuf_r+0x24>

08003784 <__smakebuf_r>:
 8003784:	898b      	ldrh	r3, [r1, #12]
 8003786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003788:	079d      	lsls	r5, r3, #30
 800378a:	4606      	mov	r6, r0
 800378c:	460c      	mov	r4, r1
 800378e:	d507      	bpl.n	80037a0 <__smakebuf_r+0x1c>
 8003790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	2301      	movs	r3, #1
 800379a:	6163      	str	r3, [r4, #20]
 800379c:	b002      	add	sp, #8
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	ab01      	add	r3, sp, #4
 80037a2:	466a      	mov	r2, sp
 80037a4:	f7ff ffc8 	bl	8003738 <__swhatbuf_r>
 80037a8:	9900      	ldr	r1, [sp, #0]
 80037aa:	4605      	mov	r5, r0
 80037ac:	4630      	mov	r0, r6
 80037ae:	f7ff fdb1 	bl	8003314 <_malloc_r>
 80037b2:	b948      	cbnz	r0, 80037c8 <__smakebuf_r+0x44>
 80037b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b8:	059a      	lsls	r2, r3, #22
 80037ba:	d4ef      	bmi.n	800379c <__smakebuf_r+0x18>
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	e7e3      	b.n	8003790 <__smakebuf_r+0xc>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	6020      	str	r0, [r4, #0]
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	6163      	str	r3, [r4, #20]
 80037d6:	9b01      	ldr	r3, [sp, #4]
 80037d8:	6120      	str	r0, [r4, #16]
 80037da:	b15b      	cbz	r3, 80037f4 <__smakebuf_r+0x70>
 80037dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 f82d 	bl	8003840 <_isatty_r>
 80037e6:	b128      	cbz	r0, 80037f4 <__smakebuf_r+0x70>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	431d      	orrs	r5, r3
 80037f8:	81a5      	strh	r5, [r4, #12]
 80037fa:	e7cf      	b.n	800379c <__smakebuf_r+0x18>

080037fc <_close_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4d06      	ldr	r5, [pc, #24]	; (8003818 <_close_r+0x1c>)
 8003800:	2300      	movs	r3, #0
 8003802:	4604      	mov	r4, r0
 8003804:	4608      	mov	r0, r1
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	f7fd f965 	bl	8000ad6 <_close>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_close_r+0x1a>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_close_r+0x1a>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000304 	.word	0x20000304

0800381c <_fstat_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4d07      	ldr	r5, [pc, #28]	; (800383c <_fstat_r+0x20>)
 8003820:	2300      	movs	r3, #0
 8003822:	4604      	mov	r4, r0
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	f7fd f960 	bl	8000aee <_fstat>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	d102      	bne.n	8003838 <_fstat_r+0x1c>
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	b103      	cbz	r3, 8003838 <_fstat_r+0x1c>
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	bd38      	pop	{r3, r4, r5, pc}
 800383a:	bf00      	nop
 800383c:	20000304 	.word	0x20000304

08003840 <_isatty_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4d06      	ldr	r5, [pc, #24]	; (800385c <_isatty_r+0x1c>)
 8003844:	2300      	movs	r3, #0
 8003846:	4604      	mov	r4, r0
 8003848:	4608      	mov	r0, r1
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	f7fd f95f 	bl	8000b0e <_isatty>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_isatty_r+0x1a>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_isatty_r+0x1a>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	20000304 	.word	0x20000304

08003860 <_lseek_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4d07      	ldr	r5, [pc, #28]	; (8003880 <_lseek_r+0x20>)
 8003864:	4604      	mov	r4, r0
 8003866:	4608      	mov	r0, r1
 8003868:	4611      	mov	r1, r2
 800386a:	2200      	movs	r2, #0
 800386c:	602a      	str	r2, [r5, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f7fd f958 	bl	8000b24 <_lseek>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_lseek_r+0x1e>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_lseek_r+0x1e>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20000304 	.word	0x20000304

08003884 <_read_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d07      	ldr	r5, [pc, #28]	; (80038a4 <_read_r+0x20>)
 8003888:	4604      	mov	r4, r0
 800388a:	4608      	mov	r0, r1
 800388c:	4611      	mov	r1, r2
 800388e:	2200      	movs	r2, #0
 8003890:	602a      	str	r2, [r5, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	f7fd f8e6 	bl	8000a64 <_read>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_read_r+0x1e>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_read_r+0x1e>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	20000304 	.word	0x20000304

080038a8 <_sbrk_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d06      	ldr	r5, [pc, #24]	; (80038c4 <_sbrk_r+0x1c>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	f7fd f944 	bl	8000b40 <_sbrk>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_sbrk_r+0x1a>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_sbrk_r+0x1a>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	20000304 	.word	0x20000304

080038c8 <_write_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d07      	ldr	r5, [pc, #28]	; (80038e8 <_write_r+0x20>)
 80038cc:	4604      	mov	r4, r0
 80038ce:	4608      	mov	r0, r1
 80038d0:	4611      	mov	r1, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	602a      	str	r2, [r5, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f7fd f8e1 	bl	8000a9e <_write>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_write_r+0x1e>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_write_r+0x1e>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	20000304 	.word	0x20000304

080038ec <_free_r>:
 80038ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ee:	2900      	cmp	r1, #0
 80038f0:	d044      	beq.n	800397c <_free_r+0x90>
 80038f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f1a1 0404 	sub.w	r4, r1, #4
 80038fe:	bfb8      	it	lt
 8003900:	18e4      	addlt	r4, r4, r3
 8003902:	f7ff fe35 	bl	8003570 <__malloc_lock>
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <_free_r+0x94>)
 8003908:	9801      	ldr	r0, [sp, #4]
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	b933      	cbnz	r3, 800391c <_free_r+0x30>
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	6014      	str	r4, [r2, #0]
 8003912:	b003      	add	sp, #12
 8003914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003918:	f7ff be30 	b.w	800357c <__malloc_unlock>
 800391c:	42a3      	cmp	r3, r4
 800391e:	d908      	bls.n	8003932 <_free_r+0x46>
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	1961      	adds	r1, r4, r5
 8003924:	428b      	cmp	r3, r1
 8003926:	bf01      	itttt	eq
 8003928:	6819      	ldreq	r1, [r3, #0]
 800392a:	685b      	ldreq	r3, [r3, #4]
 800392c:	1949      	addeq	r1, r1, r5
 800392e:	6021      	streq	r1, [r4, #0]
 8003930:	e7ed      	b.n	800390e <_free_r+0x22>
 8003932:	461a      	mov	r2, r3
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b10b      	cbz	r3, 800393c <_free_r+0x50>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d9fa      	bls.n	8003932 <_free_r+0x46>
 800393c:	6811      	ldr	r1, [r2, #0]
 800393e:	1855      	adds	r5, r2, r1
 8003940:	42a5      	cmp	r5, r4
 8003942:	d10b      	bne.n	800395c <_free_r+0x70>
 8003944:	6824      	ldr	r4, [r4, #0]
 8003946:	4421      	add	r1, r4
 8003948:	1854      	adds	r4, r2, r1
 800394a:	42a3      	cmp	r3, r4
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	d1e0      	bne.n	8003912 <_free_r+0x26>
 8003950:	681c      	ldr	r4, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	6053      	str	r3, [r2, #4]
 8003956:	440c      	add	r4, r1
 8003958:	6014      	str	r4, [r2, #0]
 800395a:	e7da      	b.n	8003912 <_free_r+0x26>
 800395c:	d902      	bls.n	8003964 <_free_r+0x78>
 800395e:	230c      	movs	r3, #12
 8003960:	6003      	str	r3, [r0, #0]
 8003962:	e7d6      	b.n	8003912 <_free_r+0x26>
 8003964:	6825      	ldr	r5, [r4, #0]
 8003966:	1961      	adds	r1, r4, r5
 8003968:	428b      	cmp	r3, r1
 800396a:	bf04      	itt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	bf04      	itt	eq
 8003974:	1949      	addeq	r1, r1, r5
 8003976:	6021      	streq	r1, [r4, #0]
 8003978:	6054      	str	r4, [r2, #4]
 800397a:	e7ca      	b.n	8003912 <_free_r+0x26>
 800397c:	b003      	add	sp, #12
 800397e:	bd30      	pop	{r4, r5, pc}
 8003980:	200002fc 	.word	0x200002fc

08003984 <_init>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr

08003990 <_fini>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr
