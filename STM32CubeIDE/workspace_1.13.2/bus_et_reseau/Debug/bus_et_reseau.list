
bus_et_reseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004874  08004874  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800487c  0800487c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  080048ec  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080048ec  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb4d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e82  00000000  00000000  0002cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000901  00000000  00000000  0002f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022850  00000000  00000000  0002ff49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebda  00000000  00000000  00052799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cefff  00000000  00000000  00061373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000379c  00000000  00000000  00130374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00133b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047d0 	.word	0x080047d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080047d0 	.word	0x080047d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BMP280_init>:
 */

#include "BMP280.h"

int BMP280_init(h_BMP280_t * h_BMP280)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    h_BMP280->data_available = 0;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	751a      	strb	r2, [r3, #20]
	h_BMP280->skipped_data = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
    //Récupération de l'ID du composant
    uint8_t chip_id = BMP280_CHIP_ID_t;
 80005c0:	23d0      	movs	r3, #208	; 0xd0
 80005c2:	73bb      	strb	r3, [r7, #14]
    h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &chip_id, 2);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f107 010e 	add.w	r1, r7, #14
 80005cc:	2202      	movs	r2, #2
 80005ce:	20ee      	movs	r0, #238	; 0xee
 80005d0:	4798      	blx	r3
    h_BMP280->I2C_drv.receive(BMP280_I2CADDR, &chip_id, 2);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f107 010e 	add.w	r1, r7, #14
 80005da:	2202      	movs	r2, #2
 80005dc:	20ee      	movs	r0, #238	; 0xee
 80005de:	4798      	blx	r3
    if(chip_id != 0x58)
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	2b58      	cmp	r3, #88	; 0x58
 80005e4:	d002      	beq.n	80005ec <BMP280_init+0x40>
    {
        return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ea:	e026      	b.n	800063a <BMP280_init+0x8e>
    }
    h_BMP280->chip = chip_id;
 80005ec:	7bba      	ldrb	r2, [r7, #14]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	701a      	strb	r2, [r3, #0]
    
    //Reset du composant
    uint8_t reset = BMP280_RESET;
 80005f2:	23e0      	movs	r3, #224	; 0xe0
 80005f4:	737b      	strb	r3, [r7, #13]
    h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &reset, 1);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f107 010d 	add.w	r1, r7, #13
 80005fe:	2201      	movs	r2, #1
 8000600:	20ee      	movs	r0, #238	; 0xee
 8000602:	4798      	blx	r3


    //Configuration du composant
    uint8_t power_mode = BMP280_SAMPLE_2|BMP280_SAMPLE_16|BMP280_NORMAL_MODE ;
 8000604:	2307      	movs	r3, #7
 8000606:	73fb      	strb	r3, [r7, #15]
    uint8_t buffer[2];
    buffer[0] = BMP280_CONTROL;
 8000608:	23f4      	movs	r3, #244	; 0xf4
 800060a:	723b      	strb	r3, [r7, #8]
    buffer[1] = power_mode;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	727b      	strb	r3, [r7, #9]
    h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, buffer, 2);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f107 0108 	add.w	r1, r7, #8
 8000618:	2202      	movs	r2, #2
 800061a:	20ee      	movs	r0, #238	; 0xee
 800061c:	4798      	blx	r3
    h_BMP280->I2C_drv.receive(BMP280_I2CADDR, buffer, 1);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	f107 0108 	add.w	r1, r7, #8
 8000626:	2201      	movs	r2, #1
 8000628:	20ee      	movs	r0, #238	; 0xee
 800062a:	4798      	blx	r3
    h_BMP280->power =  buffer[0];
 800062c:	7a3a      	ldrb	r2, [r7, #8]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	709a      	strb	r2, [r3, #2]
    h_BMP280->sample = buffer[1];
 8000632:	7a7a      	ldrb	r2, [r7, #9]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	705a      	strb	r2, [r3, #1]
    return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <I2C_transmit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int I2C_transmit(uint8_t address, uint8_t *p_data, uint16_t size)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af02      	add	r7, sp, #8
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, address, p_data, size, 100);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	b299      	uxth	r1, r3
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	2264      	movs	r2, #100	; 0x64
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <I2C_transmit+0x2c>)
 8000662:	f001 f985 	bl	8001970 <HAL_I2C_Master_Transmit>
	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000ac 	.word	0x200000ac

08000674 <I2C_receive>:

int I2C_receive(uint8_t address, uint8_t *p_data, uint16_t size)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Receive(&hi2c1, address, p_data, size, 100);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	b299      	uxth	r1, r3
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <I2C_receive+0x2c>)
 8000692:	f001 fa6b 	bl	8001b6c <HAL_I2C_Master_Receive>
	return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000ac 	.word	0x200000ac

080006a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a8:	f000 fc1c 	bl	8000ee4 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ac:	f000 f832 	bl	8000714 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b0:	f000 f954 	bl	800095c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006b4:	f000 f928 	bl	8000908 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 80006b8:	f000 f89a 	bl	80007f0 <MX_CAN1_Init>
	MX_I2C1_Init();
 80006bc:	f000 f8cc 	bl	8000858 <MX_I2C1_Init>
	MX_UART4_Init();
 80006c0:	f000 f8f8 	bl	80008b4 <MX_UART4_Init>
	/*
  pdata=0xD0;
  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(bmp280_adr<<1),  pdata, 1, 100);
  HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(bmp280_adr<<1) , pdata, 1, 100);
	 */
	h_BMP280.I2C_drv.receive = I2C_receive;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <main+0x58>)
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <main+0x5c>)
 80006c8:	609a      	str	r2, [r3, #8]
	h_BMP280.I2C_drv.transmit = I2C_transmit;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <main+0x58>)
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <main+0x60>)
 80006ce:	605a      	str	r2, [r3, #4]
	BMP280_init(&h_BMP280);
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <main+0x58>)
 80006d2:	f7ff ff6b 	bl	80005ac <BMP280_init>
	printf("chip ID = 0x%02X\r\n", h_BMP280.chip);
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <main+0x58>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <main+0x64>)
 80006de:	f003 fa05 	bl	8003aec <iprintf>
	printf("power mode = 0x%02X\r\n", h_BMP280.power);
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <main+0x58>)
 80006e4:	789b      	ldrb	r3, [r3, #2]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4808      	ldr	r0, [pc, #32]	; (800070c <main+0x68>)
 80006ea:	f003 f9ff 	bl	8003aec <iprintf>
	printf("sample = 0x%02X\r\n", h_BMP280.sample);
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <main+0x58>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <main+0x6c>)
 80006f6:	f003 f9f9 	bl	8003aec <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006fa:	e7fe      	b.n	80006fa <main+0x56>
 80006fc:	20000188 	.word	0x20000188
 8000700:	08000675 	.word	0x08000675
 8000704:	08000645 	.word	0x08000645
 8000708:	080047e8 	.word	0x080047e8
 800070c:	080047fc 	.word	0x080047fc
 8000710:	08004814 	.word	0x08004814

08000714 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f9f4 	bl	8003b10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <SystemClock_Config+0xd4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <SystemClock_Config+0xd4>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a22      	ldr	r2, [pc, #136]	; (80007ec <SystemClock_Config+0xd8>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000790:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2304      	movs	r3, #4
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fa80 	bl	8002ca8 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80007ae:	f000 f943 	bl	8000a38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 ff20 	bl	8002614 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xca>
	{
		Error_Handler();
 80007da:	f000 f92d 	bl	8000a38 <Error_Handler>
	}
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_CAN1_Init+0x60>)
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_CAN1_Init+0x64>)
 80007f8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_CAN1_Init+0x60>)
 80007fc:	2210      	movs	r2, #16
 80007fe:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_CAN1_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_CAN1_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_CAN1_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_CAN1_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_CAN1_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_CAN1_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_CAN1_Init+0x60>)
 8000826:	2200      	movs	r2, #0
 8000828:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_CAN1_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_CAN1_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_CAN1_Init+0x60>)
 8000838:	2200      	movs	r2, #0
 800083a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_CAN1_Init+0x60>)
 800083e:	f000 fbc3 	bl	8000fc8 <HAL_CAN_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_CAN1_Init+0x5c>
	{
		Error_Handler();
 8000848:	f000 f8f6 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000084 	.word	0x20000084
 8000854:	40006400 	.word	0x40006400

08000858 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f000 ff27 	bl	80016e8 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80008a0:	f000 f8ca 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000ac 	.word	0x200000ac
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_UART4_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_UART4_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_UART4_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_UART4_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_UART4_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_UART4_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_UART4_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_UART4_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_UART4_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_UART4_Init+0x4c>)
 80008ec:	f002 fc7a 	bl	80031e4 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80008f6:	f000 f89f 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000100 	.word	0x20000100
 8000904:	40004c00 	.word	0x40004c00

08000908 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_USART2_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000940:	f002 fc50 	bl	80031e4 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800094a:	f000 f875 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000144 	.word	0x20000144
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a2c      	ldr	r2, [pc, #176]	; (8000a2c <MX_GPIO_Init+0xd0>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <MX_GPIO_Init+0xd0>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009e8:	f000 fe64 	bl	80016b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_GPIO_Init+0xd8>)
 8000a04:	f000 fcc2 	bl	800138c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000a20:	f000 fcb4 	bl	800138c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020800 	.word	0x40020800

08000a38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fc4e 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_CAN_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12c      	bne.n	8000b10 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_CAN_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_CAN_MspInit+0x88>)
 8000ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_CAN_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_CAN_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_CAN_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_CAN_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b00:	2309      	movs	r3, #9
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_CAN_MspInit+0x8c>)
 8000b0c:	f000 fc3e 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40006400 	.word	0x40006400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f000 fc04 	bl	800138c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a32      	ldr	r2, [pc, #200]	; (8000c9c <HAL_UART_MspInit+0xe8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12c      	bne.n	8000c30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <HAL_UART_MspInit+0xf0>)
 8000c2a:	f000 fbaf 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2e:	e030      	b.n	8000c92 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0xf4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_UART_MspInit+0xec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c72:	230c      	movs	r3, #12
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_UART_MspInit+0xf0>)
 8000c8e:	f000 fb7d 	bl	800138c <HAL_GPIO_Init>
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	; 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004c00 	.word	0x40004c00
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40004400 	.word	0x40004400

08000cac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb4:	1d39      	adds	r1, r7, #4
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <__io_putchar+0x20>)
 8000cbe:	f002 fade 	bl	800327e <HAL_UART_Transmit>

  return ch;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000144 	.word	0x20000144

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f934 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
  }

  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff97 	bl	8000cac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
  }
  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f002 fe76 	bl	8003b20 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20020000 	.word	0x20020000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200001a4 	.word	0x200001a4
 8000e68:	200002f8 	.word	0x200002f8

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 fe35 	bl	8003b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fbef 	bl	80006a4 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ed4:	08004884 	.word	0x08004884
  ldr r2, =_sbss
 8000ed8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000edc:	200002f8 	.word	0x200002f8

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 fa09 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fd94 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa13 	bl	8001372 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	f000 f9e9 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200001a8 	.word	0x200001a8

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200001a8 	.word	0x200001a8

08000fc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0ed      	b.n	80011b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fd54 	bl	8000a94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffc:	f7ff ffd8 	bl	8000fb0 <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001002:	e012      	b.n	800102a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001004:	f7ff ffd4 	bl	8000fb0 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b0a      	cmp	r3, #10
 8001010:	d90b      	bls.n	800102a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2205      	movs	r2, #5
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0c5      	b.n	80011b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0e5      	beq.n	8001004 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0202 	bic.w	r2, r2, #2
 8001046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001048:	f7ff ffb2 	bl	8000fb0 <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104e:	e012      	b.n	8001076 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001050:	f7ff ffae 	bl	8000fb0 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b0a      	cmp	r3, #10
 800105c:	d90b      	bls.n	8001076 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2205      	movs	r2, #5
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e09f      	b.n	80011b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e5      	bne.n	8001050 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e1b      	ldrb	r3, [r3, #24]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d108      	bne.n	800109e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e007      	b.n	80010ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7e5b      	ldrb	r3, [r3, #25]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7e9b      	ldrb	r3, [r3, #26]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0220 	orr.w	r2, r2, #32
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0220 	bic.w	r2, r2, #32
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7edb      	ldrb	r3, [r3, #27]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0210 	bic.w	r2, r2, #16
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0210 	orr.w	r2, r2, #16
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7f1b      	ldrb	r3, [r3, #28]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0208 	orr.w	r2, r2, #8
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0208 	bic.w	r2, r2, #8
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7f5b      	ldrb	r3, [r3, #29]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0204 	orr.w	r2, r2, #4
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0204 	bic.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	ea42 0103 	orr.w	r1, r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff47 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5c 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e165      	b.n	8001674 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8154 	bne.w	800166e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80ae 	beq.w	800166e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_GPIO_Init+0x300>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a5c      	ldr	r2, [pc, #368]	; (800168c <HAL_GPIO_Init+0x300>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b5a      	ldr	r3, [pc, #360]	; (800168c <HAL_GPIO_Init+0x300>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a58      	ldr	r2, [pc, #352]	; (8001690 <HAL_GPIO_Init+0x304>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x308>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_GPIO_Init+0x30c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_GPIO_Init+0x310>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x212>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x314>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x318>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x20a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_GPIO_Init+0x31c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x206>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a49      	ldr	r2, [pc, #292]	; (80016ac <HAL_GPIO_Init+0x320>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x202>
 800158a:	2306      	movs	r3, #6
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 800158e:	2307      	movs	r3, #7
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_GPIO_Init+0x304>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_GPIO_Init+0x324>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <HAL_GPIO_Init+0x324>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x324>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_GPIO_Init+0x324>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_GPIO_Init+0x324>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae96 	bls.w	80013a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e12b      	b.n	8001952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fa08 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2224      	movs	r2, #36	; 0x24
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800173a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800174a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800174c:	f001 f854 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a81      	ldr	r2, [pc, #516]	; (800195c <HAL_I2C_Init+0x274>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d807      	bhi.n	800176c <HAL_I2C_Init+0x84>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a80      	ldr	r2, [pc, #512]	; (8001960 <HAL_I2C_Init+0x278>)
 8001760:	4293      	cmp	r3, r2
 8001762:	bf94      	ite	ls
 8001764:	2301      	movls	r3, #1
 8001766:	2300      	movhi	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	e006      	b.n	800177a <HAL_I2C_Init+0x92>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a7d      	ldr	r2, [pc, #500]	; (8001964 <HAL_I2C_Init+0x27c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0e7      	b.n	8001952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a78      	ldr	r2, [pc, #480]	; (8001968 <HAL_I2C_Init+0x280>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_I2C_Init+0x274>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d802      	bhi.n	80017bc <HAL_I2C_Init+0xd4>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	e009      	b.n	80017d0 <HAL_I2C_Init+0xe8>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4a69      	ldr	r2, [pc, #420]	; (800196c <HAL_I2C_Init+0x284>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	3301      	adds	r3, #1
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	495c      	ldr	r1, [pc, #368]	; (800195c <HAL_I2C_Init+0x274>)
 80017ec:	428b      	cmp	r3, r1
 80017ee:	d819      	bhi.n	8001824 <HAL_I2C_Init+0x13c>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e59      	subs	r1, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001804:	400b      	ands	r3, r1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00a      	beq.n	8001820 <HAL_I2C_Init+0x138>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e59      	subs	r1, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fbb1 f3f3 	udiv	r3, r1, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	e051      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 8001820:	2304      	movs	r3, #4
 8001822:	e04f      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_I2C_Init+0x168>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e012      	b.n	8001876 <HAL_I2C_Init+0x18e>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	0099      	lsls	r1, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Init+0x196>
 800187a:	2301      	movs	r3, #1
 800187c:	e022      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10e      	bne.n	80018a4 <HAL_I2C_Init+0x1bc>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1e58      	subs	r0, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6859      	ldr	r1, [r3, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	fbb0 f3f3 	udiv	r3, r0, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a2:	e00f      	b.n	80018c4 <HAL_I2C_Init+0x1dc>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	0099      	lsls	r1, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6809      	ldr	r1, [r1, #0]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6911      	ldr	r1, [r2, #16]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68d2      	ldr	r2, [r2, #12]
 80018fe:	4311      	orrs	r1, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	430b      	orrs	r3, r1
 8001906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	000186a0 	.word	0x000186a0
 8001960:	001e847f 	.word	0x001e847f
 8001964:	003d08ff 	.word	0x003d08ff
 8001968:	431bde83 	.word	0x431bde83
 800196c:	10624dd3 	.word	0x10624dd3

08001970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	461a      	mov	r2, r3
 800197c:	460b      	mov	r3, r1
 800197e:	817b      	strh	r3, [r7, #10]
 8001980:	4613      	mov	r3, r2
 8001982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fb14 	bl	8000fb0 <HAL_GetTick>
 8001988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b20      	cmp	r3, #32
 8001994:	f040 80e0 	bne.w	8001b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	4970      	ldr	r1, [pc, #448]	; (8001b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fc58 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
 80019b0:	e0d3      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_I2C_Master_Transmit+0x50>
 80019bc:	2302      	movs	r3, #2
 80019be:	e0cc      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d007      	beq.n	80019e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2221      	movs	r2, #33	; 0x21
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2210      	movs	r2, #16
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	893a      	ldrh	r2, [r7, #8]
 8001a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fac2 	bl	8001fb8 <I2C_MasterRequestWrite>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e08d      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a54:	e066      	b.n	8001b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fcd2 	bl	8002404 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0x188>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fcc2 	bl	8002486 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00d      	beq.n	8001b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e01a      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d194      	bne.n	8001a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	00100002 	.word	0x00100002
 8001b68:	ffff0000 	.word	0xffff0000

08001b6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	817b      	strh	r3, [r7, #10]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff fa16 	bl	8000fb0 <HAL_GetTick>
 8001b84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	f040 820b 	bne.w	8001faa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2319      	movs	r3, #25
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	497c      	ldr	r1, [pc, #496]	; (8001d90 <HAL_I2C_Master_Receive+0x224>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fb5a 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
 8001bac:	e1fe      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2C_Master_Receive+0x50>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e1f7      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d007      	beq.n	8001be2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2222      	movs	r2, #34	; 0x22
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	893a      	ldrh	r2, [r7, #8]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <HAL_I2C_Master_Receive+0x228>)
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c24:	8979      	ldrh	r1, [r7, #10]
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fa46 	bl	80020bc <I2C_MasterRequestRead>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1b8      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d113      	bne.n	8001c6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e18c      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d11b      	bne.n	8001caa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e16c      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d11b      	bne.n	8001cea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	e14c      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d10:	e138      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	f200 80f1 	bhi.w	8001efe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d123      	bne.n	8001d6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fbed 	bl	8002508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e139      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d6a:	e10b      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d14e      	bne.n	8001e12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4906      	ldr	r1, [pc, #24]	; (8001d98 <HAL_I2C_Master_Receive+0x22c>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fa6a 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e10e      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000
 8001d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e10:	e0b8      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4966      	ldr	r1, [pc, #408]	; (8001fb4 <HAL_I2C_Master_Receive+0x448>)
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fa1b 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0bf      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	2200      	movs	r2, #0
 8001e76:	494f      	ldr	r1, [pc, #316]	; (8001fb4 <HAL_I2C_Master_Receive+0x448>)
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f9ed 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e091      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001efc:	e042      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fb00 	bl	8002508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e04c      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d118      	bne.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f aec2 	bne.w	8001d12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	00010004 	.word	0x00010004

08001fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d006      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fe0:	d108      	bne.n	8001ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d107      	bne.n	800200c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f91d 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	d103      	bne.n	800203c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e035      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002048:	d108      	bne.n	800205c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e01b      	b.n	8002094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	11db      	asrs	r3, r3, #7
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0306 	and.w	r3, r3, #6
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f063 030f 	orn	r3, r3, #15
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <I2C_MasterRequestWrite+0xfc>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f943 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e010      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <I2C_MasterRequestWrite+0x100>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f933 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00010008 	.word	0x00010008
 80020b8:	00010002 	.word	0x00010002

080020bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d006      	beq.n	80020f6 <I2C_MasterRequestRead+0x3a>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d003      	beq.n	80020f6 <I2C_MasterRequestRead+0x3a>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020f4:	d108      	bne.n	8002108 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00b      	b.n	8002120 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	2b11      	cmp	r3, #17
 800210e:	d107      	bne.n	8002120 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800211e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f893 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002146:	d103      	bne.n	8002150 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e079      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215c:	d108      	bne.n	8002170 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	e05f      	b.n	8002230 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002170:	897b      	ldrh	r3, [r7, #10]
 8002172:	11db      	asrs	r3, r3, #7
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 0306 	and.w	r3, r3, #6
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f063 030f 	orn	r3, r3, #15
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4930      	ldr	r1, [pc, #192]	; (8002250 <I2C_MasterRequestRead+0x194>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8b9 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e054      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4929      	ldr	r1, [pc, #164]	; (8002254 <I2C_MasterRequestRead+0x198>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8a9 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e044      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f831 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d103      	bne.n	8002214 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e017      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	11db      	asrs	r3, r3, #7
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0306 	and.w	r3, r3, #6
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f063 030e 	orn	r3, r3, #14
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <I2C_MasterRequestRead+0x198>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f865 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00010008 	.word	0x00010008
 8002254:	00010002 	.word	0x00010002

08002258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002268:	e025      	b.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002270:	d021      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7fe fe9d 	bl	8000fb0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d302      	bcc.n	8002288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d116      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e023      	b.n	80022fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10d      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	e00c      	b.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4013      	ands	r3, r2
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d0b6      	beq.n	800226a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002314:	e051      	b.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d123      	bne.n	800236e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800233e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e046      	b.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002374:	d021      	beq.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002376:	f7fe fe1b 	bl	8000fb0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d116      	bne.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e020      	b.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10c      	bne.n	80023de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4013      	ands	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	e00b      	b.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4013      	ands	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d18d      	bne.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002410:	e02d      	b.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8ce 	bl	80025b4 <I2C_IsAcknowledgeFailed>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02d      	b.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d021      	beq.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fdc1 	bl	8000fb0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e007      	b.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d1ca      	bne.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002492:	e02d      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f88d 	bl	80025b4 <I2C_IsAcknowledgeFailed>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e02d      	b.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024aa:	d021      	beq.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ac:	f7fe fd80 	bl	8000fb0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d302      	bcc.n	80024c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e007      	b.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d1ca      	bne.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002514:	e042      	b.n	800259c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b10      	cmp	r3, #16
 8002522:	d119      	bne.n	8002558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0210 	mvn.w	r2, #16
 800252c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e029      	b.n	80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002558:	f7fe fd2a 	bl	8000fb0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	d302      	bcc.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e007      	b.n	80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d1b5      	bne.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d11b      	bne.n	8002604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0cc      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d90c      	bls.n	8002650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800268a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d044      	beq.n	8002734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d119      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e067      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4934      	ldr	r1, [pc, #208]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7fe fc54 	bl	8000fb0 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fc50 	bl	8000fb0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e04f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d20c      	bcs.n	800275c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f855 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fbb4 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08004828 	.word	0x08004828
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0a9b      	lsrs	r3, r3, #10
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	08004838 	.word	0x08004838

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffdc 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0b5b      	lsrs	r3, r3, #13
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	08004838 	.word	0x08004838

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b0ae      	sub	sp, #184	; 0xb8
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286e:	4bcb      	ldr	r3, [pc, #812]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b0c      	cmp	r3, #12
 8002878:	f200 8206 	bhi.w	8002c88 <HAL_RCC_GetSysClockFreq+0x440>
 800287c:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_RCC_GetSysClockFreq+0x3c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	080028b9 	.word	0x080028b9
 8002888:	08002c89 	.word	0x08002c89
 800288c:	08002c89 	.word	0x08002c89
 8002890:	08002c89 	.word	0x08002c89
 8002894:	080028c1 	.word	0x080028c1
 8002898:	08002c89 	.word	0x08002c89
 800289c:	08002c89 	.word	0x08002c89
 80028a0:	08002c89 	.word	0x08002c89
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	08002c89 	.word	0x08002c89
 80028ac:	08002c89 	.word	0x08002c89
 80028b0:	08002c89 	.word	0x08002c89
 80028b4:	08002ab9 	.word	0x08002ab9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4bb9      	ldr	r3, [pc, #740]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80028be:	e1e7      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4bb8      	ldr	r3, [pc, #736]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80028c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028c6:	e1e3      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4bb4      	ldr	r3, [pc, #720]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d4:	4bb1      	ldr	r3, [pc, #708]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d071      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4bae      	ldr	r3, [pc, #696]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80028f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	f04f 0000 	mov.w	r0, #0
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	0159      	lsls	r1, r3, #5
 8002914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002918:	0150      	lsls	r0, r2, #5
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4621      	mov	r1, r4
 8002920:	1a51      	subs	r1, r2, r1
 8002922:	6439      	str	r1, [r7, #64]	; 0x40
 8002924:	4629      	mov	r1, r5
 8002926:	eb63 0301 	sbc.w	r3, r3, r1
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002938:	4649      	mov	r1, r9
 800293a:	018b      	lsls	r3, r1, #6
 800293c:	4641      	mov	r1, r8
 800293e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002942:	4641      	mov	r1, r8
 8002944:	018a      	lsls	r2, r1, #6
 8002946:	4641      	mov	r1, r8
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	63b9      	str	r1, [r7, #56]	; 0x38
 800294c:	4649      	mov	r1, r9
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002960:	4649      	mov	r1, r9
 8002962:	00cb      	lsls	r3, r1, #3
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296a:	4641      	mov	r1, r8
 800296c:	00ca      	lsls	r2, r1, #3
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	4603      	mov	r3, r0
 8002974:	4622      	mov	r2, r4
 8002976:	189b      	adds	r3, r3, r2
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
 800297a:	462b      	mov	r3, r5
 800297c:	460a      	mov	r2, r1
 800297e:	eb42 0303 	adc.w	r3, r2, r3
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002990:	4629      	mov	r1, r5
 8002992:	024b      	lsls	r3, r1, #9
 8002994:	4621      	mov	r1, r4
 8002996:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800299a:	4621      	mov	r1, r4
 800299c:	024a      	lsls	r2, r1, #9
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029b4:	f7fd fc7c 	bl	80002b0 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c2:	e067      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029de:	2300      	movs	r3, #0
 80029e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a18:	4649      	mov	r1, r9
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4641      	mov	r1, r8
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4641      	mov	r1, r8
 8002a28:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a46:	4692      	mov	sl, r2
 8002a48:	469b      	mov	fp, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	462b      	mov	r3, r5
 8002a54:	eb4b 0303 	adc.w	r3, fp, r3
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a66:	4629      	mov	r1, r5
 8002a68:	028b      	lsls	r3, r1, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a70:	4621      	mov	r1, r4
 8002a72:	028a      	lsls	r2, r1, #10
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a80:	677a      	str	r2, [r7, #116]	; 0x74
 8002a82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a86:	f7fd fc13 	bl	80002b0 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4613      	mov	r3, r2
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ab6:	e0eb      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac4:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d06b      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002aec:	4622      	mov	r2, r4
 8002aee:	462b      	mov	r3, r5
 8002af0:	f04f 0000 	mov.w	r0, #0
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	0159      	lsls	r1, r3, #5
 8002afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afe:	0150      	lsls	r0, r2, #5
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4621      	mov	r1, r4
 8002b06:	1a51      	subs	r1, r2, r1
 8002b08:	61b9      	str	r1, [r7, #24]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b1e:	4659      	mov	r1, fp
 8002b20:	018b      	lsls	r3, r1, #6
 8002b22:	4651      	mov	r1, sl
 8002b24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b28:	4651      	mov	r1, sl
 8002b2a:	018a      	lsls	r2, r1, #6
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ebb2 0801 	subs.w	r8, r2, r1
 8002b32:	4659      	mov	r1, fp
 8002b34:	eb63 0901 	sbc.w	r9, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	4623      	mov	r3, r4
 8002b52:	eb18 0303 	adds.w	r3, r8, r3
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	462b      	mov	r3, r5
 8002b5a:	eb49 0303 	adc.w	r3, r9, r3
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	024b      	lsls	r3, r1, #9
 8002b70:	4621      	mov	r1, r4
 8002b72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b76:	4621      	mov	r1, r4
 8002b78:	024a      	lsls	r2, r1, #9
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b82:	2200      	movs	r2, #0
 8002b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b8c:	f7fd fb90 	bl	80002b0 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b9a:	e065      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x420>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8002bba:	2300      	movs	r3, #0
 8002bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4641      	mov	r1, r8
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	4649      	mov	r1, r9
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4651      	mov	r1, sl
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	1a54      	subs	r4, r2, r1
 8002c06:	4659      	mov	r1, fp
 8002c08:	eb63 0501 	sbc.w	r5, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	00eb      	lsls	r3, r5, #3
 8002c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c1a:	00e2      	lsls	r2, r4, #3
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	461d      	mov	r5, r3
 8002c20:	4643      	mov	r3, r8
 8002c22:	18e3      	adds	r3, r4, r3
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	464b      	mov	r3, r9
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	028b      	lsls	r3, r1, #10
 8002c3e:	4621      	mov	r1, r4
 8002c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c44:	4621      	mov	r1, r4
 8002c46:	028a      	lsls	r2, r1, #10
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c50:	2200      	movs	r2, #0
 8002c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c54:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c5a:	f7fd fb29 	bl	80002b0 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4613      	mov	r3, r2
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0f1b      	lsrs	r3, r3, #28
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	37b8      	adds	r7, #184	; 0xb8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400

08002ca8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e28d      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8083 	beq.w	8002dce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cc8:	4b94      	ldr	r3, [pc, #592]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d019      	beq.n	8002d08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cd4:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cec:	d00c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d112      	bne.n	8002d20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b84      	ldr	r3, [pc, #528]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x124>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d157      	bne.n	8002dcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e25a      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x90>
 8002d2a:	4b7c      	ldr	r3, [pc, #496]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7b      	ldr	r2, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xcc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xb4>
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a72      	ldr	r2, [pc, #456]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xcc>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6b      	ldr	r2, [pc, #428]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f918 	bl	8000fb0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe f914 	bl	8000fb0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e21f      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xdc>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe f904 	bl	8000fb0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe f900 	bl	8000fb0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e20b      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x104>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06f      	beq.n	8002eba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d11c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x186>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1d3      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	e03a      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_OscConfig+0x278>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe f8ad 	bl	8000fb0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7fe f8a9 	bl	8000fb0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1b4      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4925      	ldr	r1, [pc, #148]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x278>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f88c 	bl	8000fb0 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7fe f888 	bl	8000fb0 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e193      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d036      	beq.n	8002f34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe f86c 	bl	8000fb0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe f868 	bl	8000fb0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e173      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x234>
 8002efa:	e01b      	b.n	8002f34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe f855 	bl	8000fb0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e00e      	b.n	8002f28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe f851 	bl	8000fb0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d907      	bls.n	8002f28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e15c      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
 8002f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b8a      	ldr	r3, [pc, #552]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ea      	bne.n	8002f0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8097 	beq.w	8003070 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b83      	ldr	r3, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b7f      	ldr	r3, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a7e      	ldr	r2, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b7c      	ldr	r3, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b79      	ldr	r3, [pc, #484]	; (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b76      	ldr	r3, [pc, #472]	; (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a75      	ldr	r2, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f811 	bl	8000fb0 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7fe f80d 	bl	8000fb0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e118      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	; (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x31e>
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x358>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x340>
 8002fce:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a60      	ldr	r2, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0x358>
 8002fe8:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a59      	ldr	r2, [pc, #356]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a56      	ldr	r2, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fd ffd2 	bl	8000fb0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fd ffce 	bl	8000fb0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0d7      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ee      	beq.n	8003010 <HAL_RCC_OscConfig+0x368>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fd ffbc 	bl	8000fb0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fd ffb8 	bl	8000fb0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0c1      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ee      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4a3a      	ldr	r2, [pc, #232]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ad 	beq.w	80031d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b08      	cmp	r3, #8
 8003084:	d060      	beq.n	8003148 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d145      	bne.n	800311a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCC_OscConfig+0x4b4>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fd ff8c 	bl	8000fb0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7fd ff88 	bl	8000fb0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e093      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	071b      	lsls	r3, r3, #28
 80030e6:	491b      	ldr	r1, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x4b4>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd ff5d 	bl	8000fb0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fd ff59 	bl	8000fb0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e064      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x452>
 8003118:	e05c      	b.n	80031d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_OscConfig+0x4b4>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fd ff46 	bl	8000fb0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fd ff42 	bl	8000fb0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04d      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x480>
 8003146:	e045      	b.n	80031d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e040      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000
 800315c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d030      	beq.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d129      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d122      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	4293      	cmp	r3, r2
 800319a:	d119      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	3b01      	subs	r3, #1
 80031aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d10f      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e03f      	b.n	8003276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fcd2 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f929 	bl	8003480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08a      	sub	sp, #40	; 0x28
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	d17c      	bne.n	8003398 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_UART_Transmit+0x2c>
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e075      	b.n	800339a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_UART_Transmit+0x3e>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e06e      	b.n	800339a <HAL_UART_Transmit+0x11c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2221      	movs	r2, #33	; 0x21
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fe6d 	bl	8000fb0 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d108      	bne.n	8003300 <HAL_UART_Transmit+0x82>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e003      	b.n	8003308 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003310:	e02a      	b.n	8003368 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f840 	bl	80033a2 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e036      	b.n	800339a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3302      	adds	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e007      	b.n	800335a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1cf      	bne.n	8003312 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f810 	bl	80033a2 <UART_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e006      	b.n	800339a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b090      	sub	sp, #64	; 0x40
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b2:	e050      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ba:	d04c      	beq.n	8003456 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033c2:	f7fd fdf5 	bl	8000fb0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d241      	bcs.n	8003456 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f2:	637a      	str	r2, [r7, #52]	; 0x34
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	613b      	str	r3, [r7, #16]
   return(result);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	63bb      	str	r3, [r7, #56]	; 0x38
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003426:	623a      	str	r2, [r7, #32]
 8003428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	69f9      	ldr	r1, [r7, #28]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	61bb      	str	r3, [r7, #24]
   return(result);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e5      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00f      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d09f      	beq.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3740      	adds	r7, #64	; 0x40
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b0c0      	sub	sp, #256	; 0x100
 8003486:	af00      	add	r7, sp, #0
 8003488:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	68d9      	ldr	r1, [r3, #12]
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	ea40 0301 	orr.w	r3, r0, r1
 80034a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034d8:	f021 010c 	bic.w	r1, r1, #12
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034e6:	430b      	orrs	r3, r1
 80034e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	6999      	ldr	r1, [r3, #24]
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	ea40 0301 	orr.w	r3, r0, r1
 8003506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b8f      	ldr	r3, [pc, #572]	; (800374c <UART_SetConfig+0x2cc>)
 8003510:	429a      	cmp	r2, r3
 8003512:	d005      	beq.n	8003520 <UART_SetConfig+0xa0>
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b8d      	ldr	r3, [pc, #564]	; (8003750 <UART_SetConfig+0x2d0>)
 800351c:	429a      	cmp	r2, r3
 800351e:	d104      	bne.n	800352a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7ff f97e 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8003524:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003528:	e003      	b.n	8003532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800352a:	f7ff f965 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 800352e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353c:	f040 810c 	bne.w	8003758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003544:	2200      	movs	r2, #0
 8003546:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800354a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800354e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	1891      	adds	r1, r2, r2
 8003558:	65b9      	str	r1, [r7, #88]	; 0x58
 800355a:	415b      	adcs	r3, r3
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800355e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003562:	4621      	mov	r1, r4
 8003564:	eb12 0801 	adds.w	r8, r2, r1
 8003568:	4629      	mov	r1, r5
 800356a:	eb43 0901 	adc.w	r9, r3, r1
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003582:	4690      	mov	r8, r2
 8003584:	4699      	mov	r9, r3
 8003586:	4623      	mov	r3, r4
 8003588:	eb18 0303 	adds.w	r3, r8, r3
 800358c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003590:	462b      	mov	r3, r5
 8003592:	eb49 0303 	adc.w	r3, r9, r3
 8003596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035ae:	460b      	mov	r3, r1
 80035b0:	18db      	adds	r3, r3, r3
 80035b2:	653b      	str	r3, [r7, #80]	; 0x50
 80035b4:	4613      	mov	r3, r2
 80035b6:	eb42 0303 	adc.w	r3, r2, r3
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
 80035bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035c4:	f7fc fe74 	bl	80002b0 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b61      	ldr	r3, [pc, #388]	; (8003754 <UART_SetConfig+0x2d4>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	1891      	adds	r1, r2, r2
 80035ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80035f0:	415b      	adcs	r3, r3
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035f8:	4641      	mov	r1, r8
 80035fa:	eb12 0a01 	adds.w	sl, r2, r1
 80035fe:	4649      	mov	r1, r9
 8003600:	eb43 0b01 	adc.w	fp, r3, r1
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003618:	4692      	mov	sl, r2
 800361a:	469b      	mov	fp, r3
 800361c:	4643      	mov	r3, r8
 800361e:	eb1a 0303 	adds.w	r3, sl, r3
 8003622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003626:	464b      	mov	r3, r9
 8003628:	eb4b 0303 	adc.w	r3, fp, r3
 800362c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800363c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003644:	460b      	mov	r3, r1
 8003646:	18db      	adds	r3, r3, r3
 8003648:	643b      	str	r3, [r7, #64]	; 0x40
 800364a:	4613      	mov	r3, r2
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
 8003652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800365a:	f7fc fe29 	bl	80002b0 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4611      	mov	r1, r2
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <UART_SetConfig+0x2d4>)
 8003666:	fba3 2301 	umull	r2, r3, r3, r1
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2264      	movs	r2, #100	; 0x64
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	1acb      	subs	r3, r1, r3
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <UART_SetConfig+0x2d4>)
 800367c:	fba3 2302 	umull	r2, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003688:	441c      	add	r4, r3
 800368a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003694:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	1891      	adds	r1, r2, r2
 80036a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036a4:	415b      	adcs	r3, r3
 80036a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036ac:	4641      	mov	r1, r8
 80036ae:	1851      	adds	r1, r2, r1
 80036b0:	6339      	str	r1, [r7, #48]	; 0x30
 80036b2:	4649      	mov	r1, r9
 80036b4:	414b      	adcs	r3, r1
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036c4:	4659      	mov	r1, fp
 80036c6:	00cb      	lsls	r3, r1, #3
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ce:	4651      	mov	r1, sl
 80036d0:	00ca      	lsls	r2, r1, #3
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	4642      	mov	r2, r8
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e0:	464b      	mov	r3, r9
 80036e2:	460a      	mov	r2, r1
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003700:	460b      	mov	r3, r1
 8003702:	18db      	adds	r3, r3, r3
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
 8003706:	4613      	mov	r3, r2
 8003708:	eb42 0303 	adc.w	r3, r2, r3
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003716:	f7fc fdcb 	bl	80002b0 <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <UART_SetConfig+0x2d4>)
 8003720:	fba3 1302 	umull	r1, r3, r3, r2
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	2164      	movs	r1, #100	; 0x64
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	3332      	adds	r3, #50	; 0x32
 8003732:	4a08      	ldr	r2, [pc, #32]	; (8003754 <UART_SetConfig+0x2d4>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4422      	add	r2, r4
 8003746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003748:	e106      	b.n	8003958 <UART_SetConfig+0x4d8>
 800374a:	bf00      	nop
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375c:	2200      	movs	r2, #0
 800375e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003762:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800376a:	4642      	mov	r2, r8
 800376c:	464b      	mov	r3, r9
 800376e:	1891      	adds	r1, r2, r2
 8003770:	6239      	str	r1, [r7, #32]
 8003772:	415b      	adcs	r3, r3
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800377a:	4641      	mov	r1, r8
 800377c:	1854      	adds	r4, r2, r1
 800377e:	4649      	mov	r1, r9
 8003780:	eb43 0501 	adc.w	r5, r3, r1
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	00eb      	lsls	r3, r5, #3
 800378e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003792:	00e2      	lsls	r2, r4, #3
 8003794:	4614      	mov	r4, r2
 8003796:	461d      	mov	r5, r3
 8003798:	4643      	mov	r3, r8
 800379a:	18e3      	adds	r3, r4, r3
 800379c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037a0:	464b      	mov	r3, r9
 80037a2:	eb45 0303 	adc.w	r3, r5, r3
 80037a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037c6:	4629      	mov	r1, r5
 80037c8:	008b      	lsls	r3, r1, #2
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d0:	4621      	mov	r1, r4
 80037d2:	008a      	lsls	r2, r1, #2
 80037d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037d8:	f7fc fd6a 	bl	80002b0 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4b60      	ldr	r3, [pc, #384]	; (8003964 <UART_SetConfig+0x4e4>)
 80037e2:	fba3 2302 	umull	r2, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	011c      	lsls	r4, r3, #4
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	61b9      	str	r1, [r7, #24]
 8003804:	415b      	adcs	r3, r3
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380c:	4641      	mov	r1, r8
 800380e:	1851      	adds	r1, r2, r1
 8003810:	6139      	str	r1, [r7, #16]
 8003812:	4649      	mov	r1, r9
 8003814:	414b      	adcs	r3, r1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003824:	4659      	mov	r1, fp
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4651      	mov	r1, sl
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4642      	mov	r2, r8
 800383a:	189b      	adds	r3, r3, r2
 800383c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	67bb      	str	r3, [r7, #120]	; 0x78
 8003856:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003864:	4649      	mov	r1, r9
 8003866:	008b      	lsls	r3, r1, #2
 8003868:	4641      	mov	r1, r8
 800386a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800386e:	4641      	mov	r1, r8
 8003870:	008a      	lsls	r2, r1, #2
 8003872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003876:	f7fc fd1b 	bl	80002b0 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4611      	mov	r1, r2
 8003880:	4b38      	ldr	r3, [pc, #224]	; (8003964 <UART_SetConfig+0x4e4>)
 8003882:	fba3 2301 	umull	r2, r3, r3, r1
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2264      	movs	r2, #100	; 0x64
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	1acb      	subs	r3, r1, r3
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	3332      	adds	r3, #50	; 0x32
 8003894:	4a33      	ldr	r2, [pc, #204]	; (8003964 <UART_SetConfig+0x4e4>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a0:	441c      	add	r4, r3
 80038a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038a6:	2200      	movs	r2, #0
 80038a8:	673b      	str	r3, [r7, #112]	; 0x70
 80038aa:	677a      	str	r2, [r7, #116]	; 0x74
 80038ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	1891      	adds	r1, r2, r2
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	415b      	adcs	r3, r3
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c0:	4641      	mov	r1, r8
 80038c2:	1851      	adds	r1, r2, r1
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	4649      	mov	r1, r9
 80038c8:	414b      	adcs	r3, r1
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038d8:	4659      	mov	r1, fp
 80038da:	00cb      	lsls	r3, r1, #3
 80038dc:	4651      	mov	r1, sl
 80038de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e2:	4651      	mov	r1, sl
 80038e4:	00ca      	lsls	r2, r1, #3
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	4642      	mov	r2, r8
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038f2:	464b      	mov	r3, r9
 80038f4:	460a      	mov	r2, r1
 80038f6:	eb42 0303 	adc.w	r3, r2, r3
 80038fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	663b      	str	r3, [r7, #96]	; 0x60
 8003906:	667a      	str	r2, [r7, #100]	; 0x64
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003914:	4649      	mov	r1, r9
 8003916:	008b      	lsls	r3, r1, #2
 8003918:	4641      	mov	r1, r8
 800391a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391e:	4641      	mov	r1, r8
 8003920:	008a      	lsls	r2, r1, #2
 8003922:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003926:	f7fc fcc3 	bl	80002b0 <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <UART_SetConfig+0x4e4>)
 8003930:	fba3 1302 	umull	r1, r3, r3, r2
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2164      	movs	r1, #100	; 0x64
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <UART_SetConfig+0x4e4>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4422      	add	r2, r4
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800395e:	46bd      	mov	sp, r7
 8003960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003964:	51eb851f 	.word	0x51eb851f

08003968 <std>:
 8003968:	2300      	movs	r3, #0
 800396a:	b510      	push	{r4, lr}
 800396c:	4604      	mov	r4, r0
 800396e:	e9c0 3300 	strd	r3, r3, [r0]
 8003972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003976:	6083      	str	r3, [r0, #8]
 8003978:	8181      	strh	r1, [r0, #12]
 800397a:	6643      	str	r3, [r0, #100]	; 0x64
 800397c:	81c2      	strh	r2, [r0, #14]
 800397e:	6183      	str	r3, [r0, #24]
 8003980:	4619      	mov	r1, r3
 8003982:	2208      	movs	r2, #8
 8003984:	305c      	adds	r0, #92	; 0x5c
 8003986:	f000 f8c3 	bl	8003b10 <memset>
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <std+0x58>)
 800398c:	6263      	str	r3, [r4, #36]	; 0x24
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <std+0x5c>)
 8003990:	62a3      	str	r3, [r4, #40]	; 0x28
 8003992:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <std+0x60>)
 8003994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <std+0x64>)
 8003998:	6323      	str	r3, [r4, #48]	; 0x30
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <std+0x68>)
 800399c:	6224      	str	r4, [r4, #32]
 800399e:	429c      	cmp	r4, r3
 80039a0:	d006      	beq.n	80039b0 <std+0x48>
 80039a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80039a6:	4294      	cmp	r4, r2
 80039a8:	d002      	beq.n	80039b0 <std+0x48>
 80039aa:	33d0      	adds	r3, #208	; 0xd0
 80039ac:	429c      	cmp	r4, r3
 80039ae:	d105      	bne.n	80039bc <std+0x54>
 80039b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b8:	f000 b8dc 	b.w	8003b74 <__retarget_lock_init_recursive>
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	bf00      	nop
 80039c0:	080043d5 	.word	0x080043d5
 80039c4:	080043f7 	.word	0x080043f7
 80039c8:	0800442f 	.word	0x0800442f
 80039cc:	08004453 	.word	0x08004453
 80039d0:	200001ac 	.word	0x200001ac

080039d4 <stdio_exit_handler>:
 80039d4:	4a02      	ldr	r2, [pc, #8]	; (80039e0 <stdio_exit_handler+0xc>)
 80039d6:	4903      	ldr	r1, [pc, #12]	; (80039e4 <stdio_exit_handler+0x10>)
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <stdio_exit_handler+0x14>)
 80039da:	f000 b869 	b.w	8003ab0 <_fwalk_sglue>
 80039de:	bf00      	nop
 80039e0:	2000000c 	.word	0x2000000c
 80039e4:	0800436d 	.word	0x0800436d
 80039e8:	20000018 	.word	0x20000018

080039ec <cleanup_stdio>:
 80039ec:	6841      	ldr	r1, [r0, #4]
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <cleanup_stdio+0x34>)
 80039f0:	4299      	cmp	r1, r3
 80039f2:	b510      	push	{r4, lr}
 80039f4:	4604      	mov	r4, r0
 80039f6:	d001      	beq.n	80039fc <cleanup_stdio+0x10>
 80039f8:	f000 fcb8 	bl	800436c <_fflush_r>
 80039fc:	68a1      	ldr	r1, [r4, #8]
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <cleanup_stdio+0x38>)
 8003a00:	4299      	cmp	r1, r3
 8003a02:	d002      	beq.n	8003a0a <cleanup_stdio+0x1e>
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 fcb1 	bl	800436c <_fflush_r>
 8003a0a:	68e1      	ldr	r1, [r4, #12]
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <cleanup_stdio+0x3c>)
 8003a0e:	4299      	cmp	r1, r3
 8003a10:	d004      	beq.n	8003a1c <cleanup_stdio+0x30>
 8003a12:	4620      	mov	r0, r4
 8003a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a18:	f000 bca8 	b.w	800436c <_fflush_r>
 8003a1c:	bd10      	pop	{r4, pc}
 8003a1e:	bf00      	nop
 8003a20:	200001ac 	.word	0x200001ac
 8003a24:	20000214 	.word	0x20000214
 8003a28:	2000027c 	.word	0x2000027c

08003a2c <global_stdio_init.part.0>:
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <global_stdio_init.part.0+0x30>)
 8003a30:	4c0b      	ldr	r4, [pc, #44]	; (8003a60 <global_stdio_init.part.0+0x34>)
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <global_stdio_init.part.0+0x38>)
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	4620      	mov	r0, r4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	f7ff ff94 	bl	8003968 <std>
 8003a40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a44:	2201      	movs	r2, #1
 8003a46:	2109      	movs	r1, #9
 8003a48:	f7ff ff8e 	bl	8003968 <std>
 8003a4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a50:	2202      	movs	r2, #2
 8003a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a56:	2112      	movs	r1, #18
 8003a58:	f7ff bf86 	b.w	8003968 <std>
 8003a5c:	200002e4 	.word	0x200002e4
 8003a60:	200001ac 	.word	0x200001ac
 8003a64:	080039d5 	.word	0x080039d5

08003a68 <__sfp_lock_acquire>:
 8003a68:	4801      	ldr	r0, [pc, #4]	; (8003a70 <__sfp_lock_acquire+0x8>)
 8003a6a:	f000 b884 	b.w	8003b76 <__retarget_lock_acquire_recursive>
 8003a6e:	bf00      	nop
 8003a70:	200002e9 	.word	0x200002e9

08003a74 <__sfp_lock_release>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__sfp_lock_release+0x8>)
 8003a76:	f000 b87f 	b.w	8003b78 <__retarget_lock_release_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	200002e9 	.word	0x200002e9

08003a80 <__sinit>:
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4604      	mov	r4, r0
 8003a84:	f7ff fff0 	bl	8003a68 <__sfp_lock_acquire>
 8003a88:	6a23      	ldr	r3, [r4, #32]
 8003a8a:	b11b      	cbz	r3, 8003a94 <__sinit+0x14>
 8003a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a90:	f7ff bff0 	b.w	8003a74 <__sfp_lock_release>
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <__sinit+0x28>)
 8003a96:	6223      	str	r3, [r4, #32]
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <__sinit+0x2c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f5      	bne.n	8003a8c <__sinit+0xc>
 8003aa0:	f7ff ffc4 	bl	8003a2c <global_stdio_init.part.0>
 8003aa4:	e7f2      	b.n	8003a8c <__sinit+0xc>
 8003aa6:	bf00      	nop
 8003aa8:	080039ed 	.word	0x080039ed
 8003aac:	200002e4 	.word	0x200002e4

08003ab0 <_fwalk_sglue>:
 8003ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	4688      	mov	r8, r1
 8003ab8:	4614      	mov	r4, r2
 8003aba:	2600      	movs	r6, #0
 8003abc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ac4:	d505      	bpl.n	8003ad2 <_fwalk_sglue+0x22>
 8003ac6:	6824      	ldr	r4, [r4, #0]
 8003ac8:	2c00      	cmp	r4, #0
 8003aca:	d1f7      	bne.n	8003abc <_fwalk_sglue+0xc>
 8003acc:	4630      	mov	r0, r6
 8003ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad2:	89ab      	ldrh	r3, [r5, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d907      	bls.n	8003ae8 <_fwalk_sglue+0x38>
 8003ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003adc:	3301      	adds	r3, #1
 8003ade:	d003      	beq.n	8003ae8 <_fwalk_sglue+0x38>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	47c0      	blx	r8
 8003ae6:	4306      	orrs	r6, r0
 8003ae8:	3568      	adds	r5, #104	; 0x68
 8003aea:	e7e9      	b.n	8003ac0 <_fwalk_sglue+0x10>

08003aec <iprintf>:
 8003aec:	b40f      	push	{r0, r1, r2, r3}
 8003aee:	b507      	push	{r0, r1, r2, lr}
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <iprintf+0x20>)
 8003af2:	ab04      	add	r3, sp, #16
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003afa:	6881      	ldr	r1, [r0, #8]
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	f000 f865 	bl	8003bcc <_vfiprintf_r>
 8003b02:	b003      	add	sp, #12
 8003b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b08:	b004      	add	sp, #16
 8003b0a:	4770      	bx	lr
 8003b0c:	20000064 	.word	0x20000064

08003b10 <memset>:
 8003b10:	4402      	add	r2, r0
 8003b12:	4603      	mov	r3, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <__errno>:
 8003b20:	4b01      	ldr	r3, [pc, #4]	; (8003b28 <__errno+0x8>)
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000064 	.word	0x20000064

08003b2c <__libc_init_array>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4d0d      	ldr	r5, [pc, #52]	; (8003b64 <__libc_init_array+0x38>)
 8003b30:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <__libc_init_array+0x3c>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	2600      	movs	r6, #0
 8003b38:	42a6      	cmp	r6, r4
 8003b3a:	d109      	bne.n	8003b50 <__libc_init_array+0x24>
 8003b3c:	4d0b      	ldr	r5, [pc, #44]	; (8003b6c <__libc_init_array+0x40>)
 8003b3e:	4c0c      	ldr	r4, [pc, #48]	; (8003b70 <__libc_init_array+0x44>)
 8003b40:	f000 fe46 	bl	80047d0 <_init>
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	2600      	movs	r6, #0
 8003b4a:	42a6      	cmp	r6, r4
 8003b4c:	d105      	bne.n	8003b5a <__libc_init_array+0x2e>
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b54:	4798      	blx	r3
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7ee      	b.n	8003b38 <__libc_init_array+0xc>
 8003b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5e:	4798      	blx	r3
 8003b60:	3601      	adds	r6, #1
 8003b62:	e7f2      	b.n	8003b4a <__libc_init_array+0x1e>
 8003b64:	0800487c 	.word	0x0800487c
 8003b68:	0800487c 	.word	0x0800487c
 8003b6c:	0800487c 	.word	0x0800487c
 8003b70:	08004880 	.word	0x08004880

08003b74 <__retarget_lock_init_recursive>:
 8003b74:	4770      	bx	lr

08003b76 <__retarget_lock_acquire_recursive>:
 8003b76:	4770      	bx	lr

08003b78 <__retarget_lock_release_recursive>:
 8003b78:	4770      	bx	lr

08003b7a <__sfputc_r>:
 8003b7a:	6893      	ldr	r3, [r2, #8]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	b410      	push	{r4}
 8003b82:	6093      	str	r3, [r2, #8]
 8003b84:	da08      	bge.n	8003b98 <__sfputc_r+0x1e>
 8003b86:	6994      	ldr	r4, [r2, #24]
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	db01      	blt.n	8003b90 <__sfputc_r+0x16>
 8003b8c:	290a      	cmp	r1, #10
 8003b8e:	d103      	bne.n	8003b98 <__sfputc_r+0x1e>
 8003b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b94:	f000 bc61 	b.w	800445a <__swbuf_r>
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	1c58      	adds	r0, r3, #1
 8003b9c:	6010      	str	r0, [r2, #0]
 8003b9e:	7019      	strb	r1, [r3, #0]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <__sfputs_r>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	4606      	mov	r6, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	4614      	mov	r4, r2
 8003bb0:	18d5      	adds	r5, r2, r3
 8003bb2:	42ac      	cmp	r4, r5
 8003bb4:	d101      	bne.n	8003bba <__sfputs_r+0x12>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e007      	b.n	8003bca <__sfputs_r+0x22>
 8003bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f7ff ffda 	bl	8003b7a <__sfputc_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	d1f3      	bne.n	8003bb2 <__sfputs_r+0xa>
 8003bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bcc <_vfiprintf_r>:
 8003bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd0:	460d      	mov	r5, r1
 8003bd2:	b09d      	sub	sp, #116	; 0x74
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	4698      	mov	r8, r3
 8003bd8:	4606      	mov	r6, r0
 8003bda:	b118      	cbz	r0, 8003be4 <_vfiprintf_r+0x18>
 8003bdc:	6a03      	ldr	r3, [r0, #32]
 8003bde:	b90b      	cbnz	r3, 8003be4 <_vfiprintf_r+0x18>
 8003be0:	f7ff ff4e 	bl	8003a80 <__sinit>
 8003be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003be6:	07d9      	lsls	r1, r3, #31
 8003be8:	d405      	bmi.n	8003bf6 <_vfiprintf_r+0x2a>
 8003bea:	89ab      	ldrh	r3, [r5, #12]
 8003bec:	059a      	lsls	r2, r3, #22
 8003bee:	d402      	bmi.n	8003bf6 <_vfiprintf_r+0x2a>
 8003bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bf2:	f7ff ffc0 	bl	8003b76 <__retarget_lock_acquire_recursive>
 8003bf6:	89ab      	ldrh	r3, [r5, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	d501      	bpl.n	8003c00 <_vfiprintf_r+0x34>
 8003bfc:	692b      	ldr	r3, [r5, #16]
 8003bfe:	b99b      	cbnz	r3, 8003c28 <_vfiprintf_r+0x5c>
 8003c00:	4629      	mov	r1, r5
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 fc66 	bl	80044d4 <__swsetup_r>
 8003c08:	b170      	cbz	r0, 8003c28 <_vfiprintf_r+0x5c>
 8003c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c0c:	07dc      	lsls	r4, r3, #31
 8003c0e:	d504      	bpl.n	8003c1a <_vfiprintf_r+0x4e>
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c14:	b01d      	add	sp, #116	; 0x74
 8003c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	0598      	lsls	r0, r3, #22
 8003c1e:	d4f7      	bmi.n	8003c10 <_vfiprintf_r+0x44>
 8003c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c22:	f7ff ffa9 	bl	8003b78 <__retarget_lock_release_recursive>
 8003c26:	e7f3      	b.n	8003c10 <_vfiprintf_r+0x44>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c36:	2330      	movs	r3, #48	; 0x30
 8003c38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003dec <_vfiprintf_r+0x220>
 8003c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c40:	f04f 0901 	mov.w	r9, #1
 8003c44:	4623      	mov	r3, r4
 8003c46:	469a      	mov	sl, r3
 8003c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c4c:	b10a      	cbz	r2, 8003c52 <_vfiprintf_r+0x86>
 8003c4e:	2a25      	cmp	r2, #37	; 0x25
 8003c50:	d1f9      	bne.n	8003c46 <_vfiprintf_r+0x7a>
 8003c52:	ebba 0b04 	subs.w	fp, sl, r4
 8003c56:	d00b      	beq.n	8003c70 <_vfiprintf_r+0xa4>
 8003c58:	465b      	mov	r3, fp
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f7ff ffa2 	bl	8003ba8 <__sfputs_r>
 8003c64:	3001      	adds	r0, #1
 8003c66:	f000 80a9 	beq.w	8003dbc <_vfiprintf_r+0x1f0>
 8003c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c6c:	445a      	add	r2, fp
 8003c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8003c70:	f89a 3000 	ldrb.w	r3, [sl]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a1 	beq.w	8003dbc <_vfiprintf_r+0x1f0>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c84:	f10a 0a01 	add.w	sl, sl, #1
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	9307      	str	r3, [sp, #28]
 8003c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c90:	931a      	str	r3, [sp, #104]	; 0x68
 8003c92:	4654      	mov	r4, sl
 8003c94:	2205      	movs	r2, #5
 8003c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9a:	4854      	ldr	r0, [pc, #336]	; (8003dec <_vfiprintf_r+0x220>)
 8003c9c:	f7fc fab8 	bl	8000210 <memchr>
 8003ca0:	9a04      	ldr	r2, [sp, #16]
 8003ca2:	b9d8      	cbnz	r0, 8003cdc <_vfiprintf_r+0x110>
 8003ca4:	06d1      	lsls	r1, r2, #27
 8003ca6:	bf44      	itt	mi
 8003ca8:	2320      	movmi	r3, #32
 8003caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cae:	0713      	lsls	r3, r2, #28
 8003cb0:	bf44      	itt	mi
 8003cb2:	232b      	movmi	r3, #43	; 0x2b
 8003cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003cbe:	d015      	beq.n	8003cec <_vfiprintf_r+0x120>
 8003cc0:	9a07      	ldr	r2, [sp, #28]
 8003cc2:	4654      	mov	r4, sl
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f04f 0c0a 	mov.w	ip, #10
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd0:	3b30      	subs	r3, #48	; 0x30
 8003cd2:	2b09      	cmp	r3, #9
 8003cd4:	d94d      	bls.n	8003d72 <_vfiprintf_r+0x1a6>
 8003cd6:	b1b0      	cbz	r0, 8003d06 <_vfiprintf_r+0x13a>
 8003cd8:	9207      	str	r2, [sp, #28]
 8003cda:	e014      	b.n	8003d06 <_vfiprintf_r+0x13a>
 8003cdc:	eba0 0308 	sub.w	r3, r0, r8
 8003ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	46a2      	mov	sl, r4
 8003cea:	e7d2      	b.n	8003c92 <_vfiprintf_r+0xc6>
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	1d19      	adds	r1, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	9103      	str	r1, [sp, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bfbb      	ittet	lt
 8003cf8:	425b      	neglt	r3, r3
 8003cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8003cfe:	9307      	strge	r3, [sp, #28]
 8003d00:	9307      	strlt	r3, [sp, #28]
 8003d02:	bfb8      	it	lt
 8003d04:	9204      	strlt	r2, [sp, #16]
 8003d06:	7823      	ldrb	r3, [r4, #0]
 8003d08:	2b2e      	cmp	r3, #46	; 0x2e
 8003d0a:	d10c      	bne.n	8003d26 <_vfiprintf_r+0x15a>
 8003d0c:	7863      	ldrb	r3, [r4, #1]
 8003d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d10:	d134      	bne.n	8003d7c <_vfiprintf_r+0x1b0>
 8003d12:	9b03      	ldr	r3, [sp, #12]
 8003d14:	1d1a      	adds	r2, r3, #4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	9203      	str	r2, [sp, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfb8      	it	lt
 8003d1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d22:	3402      	adds	r4, #2
 8003d24:	9305      	str	r3, [sp, #20]
 8003d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003dfc <_vfiprintf_r+0x230>
 8003d2a:	7821      	ldrb	r1, [r4, #0]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4650      	mov	r0, sl
 8003d30:	f7fc fa6e 	bl	8000210 <memchr>
 8003d34:	b138      	cbz	r0, 8003d46 <_vfiprintf_r+0x17a>
 8003d36:	9b04      	ldr	r3, [sp, #16]
 8003d38:	eba0 000a 	sub.w	r0, r0, sl
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	4082      	lsls	r2, r0
 8003d40:	4313      	orrs	r3, r2
 8003d42:	3401      	adds	r4, #1
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4a:	4829      	ldr	r0, [pc, #164]	; (8003df0 <_vfiprintf_r+0x224>)
 8003d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d50:	2206      	movs	r2, #6
 8003d52:	f7fc fa5d 	bl	8000210 <memchr>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d03f      	beq.n	8003dda <_vfiprintf_r+0x20e>
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <_vfiprintf_r+0x228>)
 8003d5c:	bb1b      	cbnz	r3, 8003da6 <_vfiprintf_r+0x1da>
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	3307      	adds	r3, #7
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	3308      	adds	r3, #8
 8003d68:	9303      	str	r3, [sp, #12]
 8003d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6c:	443b      	add	r3, r7
 8003d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d70:	e768      	b.n	8003c44 <_vfiprintf_r+0x78>
 8003d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d76:	460c      	mov	r4, r1
 8003d78:	2001      	movs	r0, #1
 8003d7a:	e7a6      	b.n	8003cca <_vfiprintf_r+0xfe>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	3401      	adds	r4, #1
 8003d80:	9305      	str	r3, [sp, #20]
 8003d82:	4619      	mov	r1, r3
 8003d84:	f04f 0c0a 	mov.w	ip, #10
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d8e:	3a30      	subs	r2, #48	; 0x30
 8003d90:	2a09      	cmp	r2, #9
 8003d92:	d903      	bls.n	8003d9c <_vfiprintf_r+0x1d0>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0c6      	beq.n	8003d26 <_vfiprintf_r+0x15a>
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	e7c4      	b.n	8003d26 <_vfiprintf_r+0x15a>
 8003d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da0:	4604      	mov	r4, r0
 8003da2:	2301      	movs	r3, #1
 8003da4:	e7f0      	b.n	8003d88 <_vfiprintf_r+0x1bc>
 8003da6:	ab03      	add	r3, sp, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <_vfiprintf_r+0x22c>)
 8003dae:	a904      	add	r1, sp, #16
 8003db0:	4630      	mov	r0, r6
 8003db2:	f3af 8000 	nop.w
 8003db6:	4607      	mov	r7, r0
 8003db8:	1c78      	adds	r0, r7, #1
 8003dba:	d1d6      	bne.n	8003d6a <_vfiprintf_r+0x19e>
 8003dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dbe:	07d9      	lsls	r1, r3, #31
 8003dc0:	d405      	bmi.n	8003dce <_vfiprintf_r+0x202>
 8003dc2:	89ab      	ldrh	r3, [r5, #12]
 8003dc4:	059a      	lsls	r2, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_vfiprintf_r+0x202>
 8003dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dca:	f7ff fed5 	bl	8003b78 <__retarget_lock_release_recursive>
 8003dce:	89ab      	ldrh	r3, [r5, #12]
 8003dd0:	065b      	lsls	r3, r3, #25
 8003dd2:	f53f af1d 	bmi.w	8003c10 <_vfiprintf_r+0x44>
 8003dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dd8:	e71c      	b.n	8003c14 <_vfiprintf_r+0x48>
 8003dda:	ab03      	add	r3, sp, #12
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	462a      	mov	r2, r5
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <_vfiprintf_r+0x22c>)
 8003de2:	a904      	add	r1, sp, #16
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 f919 	bl	800401c <_printf_i>
 8003dea:	e7e4      	b.n	8003db6 <_vfiprintf_r+0x1ea>
 8003dec:	08004840 	.word	0x08004840
 8003df0:	0800484a 	.word	0x0800484a
 8003df4:	00000000 	.word	0x00000000
 8003df8:	08003ba9 	.word	0x08003ba9
 8003dfc:	08004846 	.word	0x08004846

08003e00 <sbrk_aligned>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4e0e      	ldr	r6, [pc, #56]	; (8003e3c <sbrk_aligned+0x3c>)
 8003e04:	460c      	mov	r4, r1
 8003e06:	6831      	ldr	r1, [r6, #0]
 8003e08:	4605      	mov	r5, r0
 8003e0a:	b911      	cbnz	r1, 8003e12 <sbrk_aligned+0x12>
 8003e0c:	f000 fc72 	bl	80046f4 <_sbrk_r>
 8003e10:	6030      	str	r0, [r6, #0]
 8003e12:	4621      	mov	r1, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 fc6d 	bl	80046f4 <_sbrk_r>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	d00a      	beq.n	8003e34 <sbrk_aligned+0x34>
 8003e1e:	1cc4      	adds	r4, r0, #3
 8003e20:	f024 0403 	bic.w	r4, r4, #3
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d007      	beq.n	8003e38 <sbrk_aligned+0x38>
 8003e28:	1a21      	subs	r1, r4, r0
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 fc62 	bl	80046f4 <_sbrk_r>
 8003e30:	3001      	adds	r0, #1
 8003e32:	d101      	bne.n	8003e38 <sbrk_aligned+0x38>
 8003e34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e38:	4620      	mov	r0, r4
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	200002f0 	.word	0x200002f0

08003e40 <_malloc_r>:
 8003e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e44:	1ccd      	adds	r5, r1, #3
 8003e46:	f025 0503 	bic.w	r5, r5, #3
 8003e4a:	3508      	adds	r5, #8
 8003e4c:	2d0c      	cmp	r5, #12
 8003e4e:	bf38      	it	cc
 8003e50:	250c      	movcc	r5, #12
 8003e52:	2d00      	cmp	r5, #0
 8003e54:	4607      	mov	r7, r0
 8003e56:	db01      	blt.n	8003e5c <_malloc_r+0x1c>
 8003e58:	42a9      	cmp	r1, r5
 8003e5a:	d905      	bls.n	8003e68 <_malloc_r+0x28>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	2600      	movs	r6, #0
 8003e62:	4630      	mov	r0, r6
 8003e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f3c <_malloc_r+0xfc>
 8003e6c:	f000 faa6 	bl	80043bc <__malloc_lock>
 8003e70:	f8d8 3000 	ldr.w	r3, [r8]
 8003e74:	461c      	mov	r4, r3
 8003e76:	bb5c      	cbnz	r4, 8003ed0 <_malloc_r+0x90>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f7ff ffc0 	bl	8003e00 <sbrk_aligned>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	4604      	mov	r4, r0
 8003e84:	d155      	bne.n	8003f32 <_malloc_r+0xf2>
 8003e86:	f8d8 4000 	ldr.w	r4, [r8]
 8003e8a:	4626      	mov	r6, r4
 8003e8c:	2e00      	cmp	r6, #0
 8003e8e:	d145      	bne.n	8003f1c <_malloc_r+0xdc>
 8003e90:	2c00      	cmp	r4, #0
 8003e92:	d048      	beq.n	8003f26 <_malloc_r+0xe6>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	4631      	mov	r1, r6
 8003e98:	4638      	mov	r0, r7
 8003e9a:	eb04 0903 	add.w	r9, r4, r3
 8003e9e:	f000 fc29 	bl	80046f4 <_sbrk_r>
 8003ea2:	4581      	cmp	r9, r0
 8003ea4:	d13f      	bne.n	8003f26 <_malloc_r+0xe6>
 8003ea6:	6821      	ldr	r1, [r4, #0]
 8003ea8:	1a6d      	subs	r5, r5, r1
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	f7ff ffa7 	bl	8003e00 <sbrk_aligned>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d037      	beq.n	8003f26 <_malloc_r+0xe6>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	442b      	add	r3, r5
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d038      	beq.n	8003f36 <_malloc_r+0xf6>
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	42a2      	cmp	r2, r4
 8003ec8:	d12b      	bne.n	8003f22 <_malloc_r+0xe2>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	e00f      	b.n	8003ef0 <_malloc_r+0xb0>
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	1b52      	subs	r2, r2, r5
 8003ed4:	d41f      	bmi.n	8003f16 <_malloc_r+0xd6>
 8003ed6:	2a0b      	cmp	r2, #11
 8003ed8:	d917      	bls.n	8003f0a <_malloc_r+0xca>
 8003eda:	1961      	adds	r1, r4, r5
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	6025      	str	r5, [r4, #0]
 8003ee0:	bf18      	it	ne
 8003ee2:	6059      	strne	r1, [r3, #4]
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	bf08      	it	eq
 8003ee8:	f8c8 1000 	streq.w	r1, [r8]
 8003eec:	5162      	str	r2, [r4, r5]
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	f104 060b 	add.w	r6, r4, #11
 8003ef6:	f000 fa67 	bl	80043c8 <__malloc_unlock>
 8003efa:	f026 0607 	bic.w	r6, r6, #7
 8003efe:	1d23      	adds	r3, r4, #4
 8003f00:	1af2      	subs	r2, r6, r3
 8003f02:	d0ae      	beq.n	8003e62 <_malloc_r+0x22>
 8003f04:	1b9b      	subs	r3, r3, r6
 8003f06:	50a3      	str	r3, [r4, r2]
 8003f08:	e7ab      	b.n	8003e62 <_malloc_r+0x22>
 8003f0a:	42a3      	cmp	r3, r4
 8003f0c:	6862      	ldr	r2, [r4, #4]
 8003f0e:	d1dd      	bne.n	8003ecc <_malloc_r+0x8c>
 8003f10:	f8c8 2000 	str.w	r2, [r8]
 8003f14:	e7ec      	b.n	8003ef0 <_malloc_r+0xb0>
 8003f16:	4623      	mov	r3, r4
 8003f18:	6864      	ldr	r4, [r4, #4]
 8003f1a:	e7ac      	b.n	8003e76 <_malloc_r+0x36>
 8003f1c:	4634      	mov	r4, r6
 8003f1e:	6876      	ldr	r6, [r6, #4]
 8003f20:	e7b4      	b.n	8003e8c <_malloc_r+0x4c>
 8003f22:	4613      	mov	r3, r2
 8003f24:	e7cc      	b.n	8003ec0 <_malloc_r+0x80>
 8003f26:	230c      	movs	r3, #12
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f000 fa4c 	bl	80043c8 <__malloc_unlock>
 8003f30:	e797      	b.n	8003e62 <_malloc_r+0x22>
 8003f32:	6025      	str	r5, [r4, #0]
 8003f34:	e7dc      	b.n	8003ef0 <_malloc_r+0xb0>
 8003f36:	605b      	str	r3, [r3, #4]
 8003f38:	deff      	udf	#255	; 0xff
 8003f3a:	bf00      	nop
 8003f3c:	200002ec 	.word	0x200002ec

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4616      	mov	r6, r2
 8003f46:	4699      	mov	r9, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bfb8      	it	lt
 8003f54:	4613      	movlt	r3, r2
 8003f56:	6033      	str	r3, [r6, #0]
 8003f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	b10a      	cbz	r2, 8003f66 <_printf_common+0x26>
 8003f62:	3301      	adds	r3, #1
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	0699      	lsls	r1, r3, #26
 8003f6a:	bf42      	ittt	mi
 8003f6c:	6833      	ldrmi	r3, [r6, #0]
 8003f6e:	3302      	addmi	r3, #2
 8003f70:	6033      	strmi	r3, [r6, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d106      	bne.n	8003f88 <_printf_common+0x48>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	6832      	ldr	r2, [r6, #0]
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	dc26      	bgt.n	8003fd6 <_printf_common+0x96>
 8003f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f8c:	1e13      	subs	r3, r2, #0
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	bf18      	it	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	0692      	lsls	r2, r2, #26
 8003f96:	d42b      	bmi.n	8003ff0 <_printf_common+0xb0>
 8003f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d01e      	beq.n	8003fe4 <_printf_common+0xa4>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	6922      	ldr	r2, [r4, #16]
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf02      	ittt	eq
 8003fb2:	68e5      	ldreq	r5, [r4, #12]
 8003fb4:	6833      	ldreq	r3, [r6, #0]
 8003fb6:	1aed      	subeq	r5, r5, r3
 8003fb8:	68a3      	ldr	r3, [r4, #8]
 8003fba:	bf0c      	ite	eq
 8003fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc0:	2500      	movne	r5, #0
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bfc4      	itt	gt
 8003fc6:	1a9b      	subgt	r3, r3, r2
 8003fc8:	18ed      	addgt	r5, r5, r3
 8003fca:	2600      	movs	r6, #0
 8003fcc:	341a      	adds	r4, #26
 8003fce:	42b5      	cmp	r5, r6
 8003fd0:	d11a      	bne.n	8004008 <_printf_common+0xc8>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e008      	b.n	8003fe8 <_printf_common+0xa8>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4652      	mov	r2, sl
 8003fda:	4649      	mov	r1, r9
 8003fdc:	4638      	mov	r0, r7
 8003fde:	47c0      	blx	r8
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d103      	bne.n	8003fec <_printf_common+0xac>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	3501      	adds	r5, #1
 8003fee:	e7c6      	b.n	8003f7e <_printf_common+0x3e>
 8003ff0:	18e1      	adds	r1, r4, r3
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	2030      	movs	r0, #48	; 0x30
 8003ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ffa:	4422      	add	r2, r4
 8003ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004004:	3302      	adds	r3, #2
 8004006:	e7c7      	b.n	8003f98 <_printf_common+0x58>
 8004008:	2301      	movs	r3, #1
 800400a:	4622      	mov	r2, r4
 800400c:	4649      	mov	r1, r9
 800400e:	4638      	mov	r0, r7
 8004010:	47c0      	blx	r8
 8004012:	3001      	adds	r0, #1
 8004014:	d0e6      	beq.n	8003fe4 <_printf_common+0xa4>
 8004016:	3601      	adds	r6, #1
 8004018:	e7d9      	b.n	8003fce <_printf_common+0x8e>
	...

0800401c <_printf_i>:
 800401c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	7e0f      	ldrb	r7, [r1, #24]
 8004022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004024:	2f78      	cmp	r7, #120	; 0x78
 8004026:	4691      	mov	r9, r2
 8004028:	4680      	mov	r8, r0
 800402a:	460c      	mov	r4, r1
 800402c:	469a      	mov	sl, r3
 800402e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004032:	d807      	bhi.n	8004044 <_printf_i+0x28>
 8004034:	2f62      	cmp	r7, #98	; 0x62
 8004036:	d80a      	bhi.n	800404e <_printf_i+0x32>
 8004038:	2f00      	cmp	r7, #0
 800403a:	f000 80d4 	beq.w	80041e6 <_printf_i+0x1ca>
 800403e:	2f58      	cmp	r7, #88	; 0x58
 8004040:	f000 80c0 	beq.w	80041c4 <_printf_i+0x1a8>
 8004044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800404c:	e03a      	b.n	80040c4 <_printf_i+0xa8>
 800404e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004052:	2b15      	cmp	r3, #21
 8004054:	d8f6      	bhi.n	8004044 <_printf_i+0x28>
 8004056:	a101      	add	r1, pc, #4	; (adr r1, 800405c <_printf_i+0x40>)
 8004058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800405c:	080040b5 	.word	0x080040b5
 8004060:	080040c9 	.word	0x080040c9
 8004064:	08004045 	.word	0x08004045
 8004068:	08004045 	.word	0x08004045
 800406c:	08004045 	.word	0x08004045
 8004070:	08004045 	.word	0x08004045
 8004074:	080040c9 	.word	0x080040c9
 8004078:	08004045 	.word	0x08004045
 800407c:	08004045 	.word	0x08004045
 8004080:	08004045 	.word	0x08004045
 8004084:	08004045 	.word	0x08004045
 8004088:	080041cd 	.word	0x080041cd
 800408c:	080040f5 	.word	0x080040f5
 8004090:	08004187 	.word	0x08004187
 8004094:	08004045 	.word	0x08004045
 8004098:	08004045 	.word	0x08004045
 800409c:	080041ef 	.word	0x080041ef
 80040a0:	08004045 	.word	0x08004045
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	08004045 	.word	0x08004045
 80040ac:	08004045 	.word	0x08004045
 80040b0:	0800418f 	.word	0x0800418f
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	602a      	str	r2, [r5, #0]
 80040bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c4:	2301      	movs	r3, #1
 80040c6:	e09f      	b.n	8004208 <_printf_i+0x1ec>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	0607      	lsls	r7, r0, #24
 80040ce:	f103 0104 	add.w	r1, r3, #4
 80040d2:	6029      	str	r1, [r5, #0]
 80040d4:	d501      	bpl.n	80040da <_printf_i+0xbe>
 80040d6:	681e      	ldr	r6, [r3, #0]
 80040d8:	e003      	b.n	80040e2 <_printf_i+0xc6>
 80040da:	0646      	lsls	r6, r0, #25
 80040dc:	d5fb      	bpl.n	80040d6 <_printf_i+0xba>
 80040de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	da03      	bge.n	80040ee <_printf_i+0xd2>
 80040e6:	232d      	movs	r3, #45	; 0x2d
 80040e8:	4276      	negs	r6, r6
 80040ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ee:	485a      	ldr	r0, [pc, #360]	; (8004258 <_printf_i+0x23c>)
 80040f0:	230a      	movs	r3, #10
 80040f2:	e012      	b.n	800411a <_printf_i+0xfe>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	1d19      	adds	r1, r3, #4
 80040fa:	6029      	str	r1, [r5, #0]
 80040fc:	0605      	lsls	r5, r0, #24
 80040fe:	d501      	bpl.n	8004104 <_printf_i+0xe8>
 8004100:	681e      	ldr	r6, [r3, #0]
 8004102:	e002      	b.n	800410a <_printf_i+0xee>
 8004104:	0641      	lsls	r1, r0, #25
 8004106:	d5fb      	bpl.n	8004100 <_printf_i+0xe4>
 8004108:	881e      	ldrh	r6, [r3, #0]
 800410a:	4853      	ldr	r0, [pc, #332]	; (8004258 <_printf_i+0x23c>)
 800410c:	2f6f      	cmp	r7, #111	; 0x6f
 800410e:	bf0c      	ite	eq
 8004110:	2308      	moveq	r3, #8
 8004112:	230a      	movne	r3, #10
 8004114:	2100      	movs	r1, #0
 8004116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800411a:	6865      	ldr	r5, [r4, #4]
 800411c:	60a5      	str	r5, [r4, #8]
 800411e:	2d00      	cmp	r5, #0
 8004120:	bfa2      	ittt	ge
 8004122:	6821      	ldrge	r1, [r4, #0]
 8004124:	f021 0104 	bicge.w	r1, r1, #4
 8004128:	6021      	strge	r1, [r4, #0]
 800412a:	b90e      	cbnz	r6, 8004130 <_printf_i+0x114>
 800412c:	2d00      	cmp	r5, #0
 800412e:	d04b      	beq.n	80041c8 <_printf_i+0x1ac>
 8004130:	4615      	mov	r5, r2
 8004132:	fbb6 f1f3 	udiv	r1, r6, r3
 8004136:	fb03 6711 	mls	r7, r3, r1, r6
 800413a:	5dc7      	ldrb	r7, [r0, r7]
 800413c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004140:	4637      	mov	r7, r6
 8004142:	42bb      	cmp	r3, r7
 8004144:	460e      	mov	r6, r1
 8004146:	d9f4      	bls.n	8004132 <_printf_i+0x116>
 8004148:	2b08      	cmp	r3, #8
 800414a:	d10b      	bne.n	8004164 <_printf_i+0x148>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	07de      	lsls	r6, r3, #31
 8004150:	d508      	bpl.n	8004164 <_printf_i+0x148>
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	6861      	ldr	r1, [r4, #4]
 8004156:	4299      	cmp	r1, r3
 8004158:	bfde      	ittt	le
 800415a:	2330      	movle	r3, #48	; 0x30
 800415c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004160:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004164:	1b52      	subs	r2, r2, r5
 8004166:	6122      	str	r2, [r4, #16]
 8004168:	f8cd a000 	str.w	sl, [sp]
 800416c:	464b      	mov	r3, r9
 800416e:	aa03      	add	r2, sp, #12
 8004170:	4621      	mov	r1, r4
 8004172:	4640      	mov	r0, r8
 8004174:	f7ff fee4 	bl	8003f40 <_printf_common>
 8004178:	3001      	adds	r0, #1
 800417a:	d14a      	bne.n	8004212 <_printf_i+0x1f6>
 800417c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004180:	b004      	add	sp, #16
 8004182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	4833      	ldr	r0, [pc, #204]	; (800425c <_printf_i+0x240>)
 8004190:	2778      	movs	r7, #120	; 0x78
 8004192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	6829      	ldr	r1, [r5, #0]
 800419a:	061f      	lsls	r7, r3, #24
 800419c:	f851 6b04 	ldr.w	r6, [r1], #4
 80041a0:	d402      	bmi.n	80041a8 <_printf_i+0x18c>
 80041a2:	065f      	lsls	r7, r3, #25
 80041a4:	bf48      	it	mi
 80041a6:	b2b6      	uxthmi	r6, r6
 80041a8:	07df      	lsls	r7, r3, #31
 80041aa:	bf48      	it	mi
 80041ac:	f043 0320 	orrmi.w	r3, r3, #32
 80041b0:	6029      	str	r1, [r5, #0]
 80041b2:	bf48      	it	mi
 80041b4:	6023      	strmi	r3, [r4, #0]
 80041b6:	b91e      	cbnz	r6, 80041c0 <_printf_i+0x1a4>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	f023 0320 	bic.w	r3, r3, #32
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	2310      	movs	r3, #16
 80041c2:	e7a7      	b.n	8004114 <_printf_i+0xf8>
 80041c4:	4824      	ldr	r0, [pc, #144]	; (8004258 <_printf_i+0x23c>)
 80041c6:	e7e4      	b.n	8004192 <_printf_i+0x176>
 80041c8:	4615      	mov	r5, r2
 80041ca:	e7bd      	b.n	8004148 <_printf_i+0x12c>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	6826      	ldr	r6, [r4, #0]
 80041d0:	6961      	ldr	r1, [r4, #20]
 80041d2:	1d18      	adds	r0, r3, #4
 80041d4:	6028      	str	r0, [r5, #0]
 80041d6:	0635      	lsls	r5, r6, #24
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	d501      	bpl.n	80041e0 <_printf_i+0x1c4>
 80041dc:	6019      	str	r1, [r3, #0]
 80041de:	e002      	b.n	80041e6 <_printf_i+0x1ca>
 80041e0:	0670      	lsls	r0, r6, #25
 80041e2:	d5fb      	bpl.n	80041dc <_printf_i+0x1c0>
 80041e4:	8019      	strh	r1, [r3, #0]
 80041e6:	2300      	movs	r3, #0
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	4615      	mov	r5, r2
 80041ec:	e7bc      	b.n	8004168 <_printf_i+0x14c>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	1d1a      	adds	r2, r3, #4
 80041f2:	602a      	str	r2, [r5, #0]
 80041f4:	681d      	ldr	r5, [r3, #0]
 80041f6:	6862      	ldr	r2, [r4, #4]
 80041f8:	2100      	movs	r1, #0
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7fc f808 	bl	8000210 <memchr>
 8004200:	b108      	cbz	r0, 8004206 <_printf_i+0x1ea>
 8004202:	1b40      	subs	r0, r0, r5
 8004204:	6060      	str	r0, [r4, #4]
 8004206:	6863      	ldr	r3, [r4, #4]
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	2300      	movs	r3, #0
 800420c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004210:	e7aa      	b.n	8004168 <_printf_i+0x14c>
 8004212:	6923      	ldr	r3, [r4, #16]
 8004214:	462a      	mov	r2, r5
 8004216:	4649      	mov	r1, r9
 8004218:	4640      	mov	r0, r8
 800421a:	47d0      	blx	sl
 800421c:	3001      	adds	r0, #1
 800421e:	d0ad      	beq.n	800417c <_printf_i+0x160>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	079b      	lsls	r3, r3, #30
 8004224:	d413      	bmi.n	800424e <_printf_i+0x232>
 8004226:	68e0      	ldr	r0, [r4, #12]
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	4298      	cmp	r0, r3
 800422c:	bfb8      	it	lt
 800422e:	4618      	movlt	r0, r3
 8004230:	e7a6      	b.n	8004180 <_printf_i+0x164>
 8004232:	2301      	movs	r3, #1
 8004234:	4632      	mov	r2, r6
 8004236:	4649      	mov	r1, r9
 8004238:	4640      	mov	r0, r8
 800423a:	47d0      	blx	sl
 800423c:	3001      	adds	r0, #1
 800423e:	d09d      	beq.n	800417c <_printf_i+0x160>
 8004240:	3501      	adds	r5, #1
 8004242:	68e3      	ldr	r3, [r4, #12]
 8004244:	9903      	ldr	r1, [sp, #12]
 8004246:	1a5b      	subs	r3, r3, r1
 8004248:	42ab      	cmp	r3, r5
 800424a:	dcf2      	bgt.n	8004232 <_printf_i+0x216>
 800424c:	e7eb      	b.n	8004226 <_printf_i+0x20a>
 800424e:	2500      	movs	r5, #0
 8004250:	f104 0619 	add.w	r6, r4, #25
 8004254:	e7f5      	b.n	8004242 <_printf_i+0x226>
 8004256:	bf00      	nop
 8004258:	08004851 	.word	0x08004851
 800425c:	08004862 	.word	0x08004862

08004260 <__sflush_r>:
 8004260:	898a      	ldrh	r2, [r1, #12]
 8004262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	0710      	lsls	r0, r2, #28
 800426a:	460c      	mov	r4, r1
 800426c:	d458      	bmi.n	8004320 <__sflush_r+0xc0>
 800426e:	684b      	ldr	r3, [r1, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	dc05      	bgt.n	8004280 <__sflush_r+0x20>
 8004274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	dc02      	bgt.n	8004280 <__sflush_r+0x20>
 800427a:	2000      	movs	r0, #0
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004282:	2e00      	cmp	r6, #0
 8004284:	d0f9      	beq.n	800427a <__sflush_r+0x1a>
 8004286:	2300      	movs	r3, #0
 8004288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800428c:	682f      	ldr	r7, [r5, #0]
 800428e:	6a21      	ldr	r1, [r4, #32]
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	d032      	beq.n	80042fa <__sflush_r+0x9a>
 8004294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	075a      	lsls	r2, r3, #29
 800429a:	d505      	bpl.n	80042a8 <__sflush_r+0x48>
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	1ac0      	subs	r0, r0, r3
 80042a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042a2:	b10b      	cbz	r3, 80042a8 <__sflush_r+0x48>
 80042a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a6:	1ac0      	subs	r0, r0, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	4602      	mov	r2, r0
 80042ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ae:	6a21      	ldr	r1, [r4, #32]
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b0      	blx	r6
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	d106      	bne.n	80042c8 <__sflush_r+0x68>
 80042ba:	6829      	ldr	r1, [r5, #0]
 80042bc:	291d      	cmp	r1, #29
 80042be:	d82b      	bhi.n	8004318 <__sflush_r+0xb8>
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <__sflush_r+0x108>)
 80042c2:	410a      	asrs	r2, r1
 80042c4:	07d6      	lsls	r6, r2, #31
 80042c6:	d427      	bmi.n	8004318 <__sflush_r+0xb8>
 80042c8:	2200      	movs	r2, #0
 80042ca:	6062      	str	r2, [r4, #4]
 80042cc:	04d9      	lsls	r1, r3, #19
 80042ce:	6922      	ldr	r2, [r4, #16]
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	d504      	bpl.n	80042de <__sflush_r+0x7e>
 80042d4:	1c42      	adds	r2, r0, #1
 80042d6:	d101      	bne.n	80042dc <__sflush_r+0x7c>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b903      	cbnz	r3, 80042de <__sflush_r+0x7e>
 80042dc:	6560      	str	r0, [r4, #84]	; 0x54
 80042de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042e0:	602f      	str	r7, [r5, #0]
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d0c9      	beq.n	800427a <__sflush_r+0x1a>
 80042e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d002      	beq.n	80042f4 <__sflush_r+0x94>
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 fa22 	bl	8004738 <_free_r>
 80042f4:	2000      	movs	r0, #0
 80042f6:	6360      	str	r0, [r4, #52]	; 0x34
 80042f8:	e7c0      	b.n	800427c <__sflush_r+0x1c>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	1c41      	adds	r1, r0, #1
 8004302:	d1c8      	bne.n	8004296 <__sflush_r+0x36>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0c5      	beq.n	8004296 <__sflush_r+0x36>
 800430a:	2b1d      	cmp	r3, #29
 800430c:	d001      	beq.n	8004312 <__sflush_r+0xb2>
 800430e:	2b16      	cmp	r3, #22
 8004310:	d101      	bne.n	8004316 <__sflush_r+0xb6>
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	e7b1      	b.n	800427a <__sflush_r+0x1a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	e7ad      	b.n	800427c <__sflush_r+0x1c>
 8004320:	690f      	ldr	r7, [r1, #16]
 8004322:	2f00      	cmp	r7, #0
 8004324:	d0a9      	beq.n	800427a <__sflush_r+0x1a>
 8004326:	0793      	lsls	r3, r2, #30
 8004328:	680e      	ldr	r6, [r1, #0]
 800432a:	bf08      	it	eq
 800432c:	694b      	ldreq	r3, [r1, #20]
 800432e:	600f      	str	r7, [r1, #0]
 8004330:	bf18      	it	ne
 8004332:	2300      	movne	r3, #0
 8004334:	eba6 0807 	sub.w	r8, r6, r7
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	f1b8 0f00 	cmp.w	r8, #0
 800433e:	dd9c      	ble.n	800427a <__sflush_r+0x1a>
 8004340:	6a21      	ldr	r1, [r4, #32]
 8004342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004344:	4643      	mov	r3, r8
 8004346:	463a      	mov	r2, r7
 8004348:	4628      	mov	r0, r5
 800434a:	47b0      	blx	r6
 800434c:	2800      	cmp	r0, #0
 800434e:	dc06      	bgt.n	800435e <__sflush_r+0xfe>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	e78e      	b.n	800427c <__sflush_r+0x1c>
 800435e:	4407      	add	r7, r0
 8004360:	eba8 0800 	sub.w	r8, r8, r0
 8004364:	e7e9      	b.n	800433a <__sflush_r+0xda>
 8004366:	bf00      	nop
 8004368:	dfbffffe 	.word	0xdfbffffe

0800436c <_fflush_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b913      	cbnz	r3, 800437c <_fflush_r+0x10>
 8004376:	2500      	movs	r5, #0
 8004378:	4628      	mov	r0, r5
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	b118      	cbz	r0, 8004386 <_fflush_r+0x1a>
 800437e:	6a03      	ldr	r3, [r0, #32]
 8004380:	b90b      	cbnz	r3, 8004386 <_fflush_r+0x1a>
 8004382:	f7ff fb7d 	bl	8003a80 <__sinit>
 8004386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f3      	beq.n	8004376 <_fflush_r+0xa>
 800438e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004390:	07d0      	lsls	r0, r2, #31
 8004392:	d404      	bmi.n	800439e <_fflush_r+0x32>
 8004394:	0599      	lsls	r1, r3, #22
 8004396:	d402      	bmi.n	800439e <_fflush_r+0x32>
 8004398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439a:	f7ff fbec 	bl	8003b76 <__retarget_lock_acquire_recursive>
 800439e:	4628      	mov	r0, r5
 80043a0:	4621      	mov	r1, r4
 80043a2:	f7ff ff5d 	bl	8004260 <__sflush_r>
 80043a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043a8:	07da      	lsls	r2, r3, #31
 80043aa:	4605      	mov	r5, r0
 80043ac:	d4e4      	bmi.n	8004378 <_fflush_r+0xc>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	059b      	lsls	r3, r3, #22
 80043b2:	d4e1      	bmi.n	8004378 <_fflush_r+0xc>
 80043b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043b6:	f7ff fbdf 	bl	8003b78 <__retarget_lock_release_recursive>
 80043ba:	e7dd      	b.n	8004378 <_fflush_r+0xc>

080043bc <__malloc_lock>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__malloc_lock+0x8>)
 80043be:	f7ff bbda 	b.w	8003b76 <__retarget_lock_acquire_recursive>
 80043c2:	bf00      	nop
 80043c4:	200002e8 	.word	0x200002e8

080043c8 <__malloc_unlock>:
 80043c8:	4801      	ldr	r0, [pc, #4]	; (80043d0 <__malloc_unlock+0x8>)
 80043ca:	f7ff bbd5 	b.w	8003b78 <__retarget_lock_release_recursive>
 80043ce:	bf00      	nop
 80043d0:	200002e8 	.word	0x200002e8

080043d4 <__sread>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	460c      	mov	r4, r1
 80043d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043dc:	f000 f978 	bl	80046d0 <_read_r>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	bfab      	itete	ge
 80043e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043e6:	89a3      	ldrhlt	r3, [r4, #12]
 80043e8:	181b      	addge	r3, r3, r0
 80043ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043ee:	bfac      	ite	ge
 80043f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80043f2:	81a3      	strhlt	r3, [r4, #12]
 80043f4:	bd10      	pop	{r4, pc}

080043f6 <__swrite>:
 80043f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043fa:	461f      	mov	r7, r3
 80043fc:	898b      	ldrh	r3, [r1, #12]
 80043fe:	05db      	lsls	r3, r3, #23
 8004400:	4605      	mov	r5, r0
 8004402:	460c      	mov	r4, r1
 8004404:	4616      	mov	r6, r2
 8004406:	d505      	bpl.n	8004414 <__swrite+0x1e>
 8004408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440c:	2302      	movs	r3, #2
 800440e:	2200      	movs	r2, #0
 8004410:	f000 f94c 	bl	80046ac <_lseek_r>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800441a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	4632      	mov	r2, r6
 8004422:	463b      	mov	r3, r7
 8004424:	4628      	mov	r0, r5
 8004426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800442a:	f000 b973 	b.w	8004714 <_write_r>

0800442e <__sseek>:
 800442e:	b510      	push	{r4, lr}
 8004430:	460c      	mov	r4, r1
 8004432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004436:	f000 f939 	bl	80046ac <_lseek_r>
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	bf15      	itete	ne
 8004440:	6560      	strne	r0, [r4, #84]	; 0x54
 8004442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800444a:	81a3      	strheq	r3, [r4, #12]
 800444c:	bf18      	it	ne
 800444e:	81a3      	strhne	r3, [r4, #12]
 8004450:	bd10      	pop	{r4, pc}

08004452 <__sclose>:
 8004452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004456:	f000 b8f7 	b.w	8004648 <_close_r>

0800445a <__swbuf_r>:
 800445a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445c:	460e      	mov	r6, r1
 800445e:	4614      	mov	r4, r2
 8004460:	4605      	mov	r5, r0
 8004462:	b118      	cbz	r0, 800446c <__swbuf_r+0x12>
 8004464:	6a03      	ldr	r3, [r0, #32]
 8004466:	b90b      	cbnz	r3, 800446c <__swbuf_r+0x12>
 8004468:	f7ff fb0a 	bl	8003a80 <__sinit>
 800446c:	69a3      	ldr	r3, [r4, #24]
 800446e:	60a3      	str	r3, [r4, #8]
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	071a      	lsls	r2, r3, #28
 8004474:	d525      	bpl.n	80044c2 <__swbuf_r+0x68>
 8004476:	6923      	ldr	r3, [r4, #16]
 8004478:	b31b      	cbz	r3, 80044c2 <__swbuf_r+0x68>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	1a98      	subs	r0, r3, r2
 8004480:	6963      	ldr	r3, [r4, #20]
 8004482:	b2f6      	uxtb	r6, r6
 8004484:	4283      	cmp	r3, r0
 8004486:	4637      	mov	r7, r6
 8004488:	dc04      	bgt.n	8004494 <__swbuf_r+0x3a>
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f7ff ff6d 	bl	800436c <_fflush_r>
 8004492:	b9e0      	cbnz	r0, 80044ce <__swbuf_r+0x74>
 8004494:	68a3      	ldr	r3, [r4, #8]
 8004496:	3b01      	subs	r3, #1
 8004498:	60a3      	str	r3, [r4, #8]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	701e      	strb	r6, [r3, #0]
 80044a2:	6962      	ldr	r2, [r4, #20]
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d004      	beq.n	80044b4 <__swbuf_r+0x5a>
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	07db      	lsls	r3, r3, #31
 80044ae:	d506      	bpl.n	80044be <__swbuf_r+0x64>
 80044b0:	2e0a      	cmp	r6, #10
 80044b2:	d104      	bne.n	80044be <__swbuf_r+0x64>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	f7ff ff58 	bl	800436c <_fflush_r>
 80044bc:	b938      	cbnz	r0, 80044ce <__swbuf_r+0x74>
 80044be:	4638      	mov	r0, r7
 80044c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f805 	bl	80044d4 <__swsetup_r>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d0d5      	beq.n	800447a <__swbuf_r+0x20>
 80044ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044d2:	e7f4      	b.n	80044be <__swbuf_r+0x64>

080044d4 <__swsetup_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <__swsetup_r+0xac>)
 80044d8:	4605      	mov	r5, r0
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	460c      	mov	r4, r1
 80044de:	b118      	cbz	r0, 80044e8 <__swsetup_r+0x14>
 80044e0:	6a03      	ldr	r3, [r0, #32]
 80044e2:	b90b      	cbnz	r3, 80044e8 <__swsetup_r+0x14>
 80044e4:	f7ff facc 	bl	8003a80 <__sinit>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ee:	0718      	lsls	r0, r3, #28
 80044f0:	d422      	bmi.n	8004538 <__swsetup_r+0x64>
 80044f2:	06d9      	lsls	r1, r3, #27
 80044f4:	d407      	bmi.n	8004506 <__swsetup_r+0x32>
 80044f6:	2309      	movs	r3, #9
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044fe:	81a3      	strh	r3, [r4, #12]
 8004500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004504:	e034      	b.n	8004570 <__swsetup_r+0x9c>
 8004506:	0758      	lsls	r0, r3, #29
 8004508:	d512      	bpl.n	8004530 <__swsetup_r+0x5c>
 800450a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800450c:	b141      	cbz	r1, 8004520 <__swsetup_r+0x4c>
 800450e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004512:	4299      	cmp	r1, r3
 8004514:	d002      	beq.n	800451c <__swsetup_r+0x48>
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f90e 	bl	8004738 <_free_r>
 800451c:	2300      	movs	r3, #0
 800451e:	6363      	str	r3, [r4, #52]	; 0x34
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	2300      	movs	r3, #0
 800452a:	6063      	str	r3, [r4, #4]
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f043 0308 	orr.w	r3, r3, #8
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	b94b      	cbnz	r3, 8004550 <__swsetup_r+0x7c>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004546:	d003      	beq.n	8004550 <__swsetup_r+0x7c>
 8004548:	4621      	mov	r1, r4
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f840 	bl	80045d0 <__smakebuf_r>
 8004550:	89a0      	ldrh	r0, [r4, #12]
 8004552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004556:	f010 0301 	ands.w	r3, r0, #1
 800455a:	d00a      	beq.n	8004572 <__swsetup_r+0x9e>
 800455c:	2300      	movs	r3, #0
 800455e:	60a3      	str	r3, [r4, #8]
 8004560:	6963      	ldr	r3, [r4, #20]
 8004562:	425b      	negs	r3, r3
 8004564:	61a3      	str	r3, [r4, #24]
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	b943      	cbnz	r3, 800457c <__swsetup_r+0xa8>
 800456a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800456e:	d1c4      	bne.n	80044fa <__swsetup_r+0x26>
 8004570:	bd38      	pop	{r3, r4, r5, pc}
 8004572:	0781      	lsls	r1, r0, #30
 8004574:	bf58      	it	pl
 8004576:	6963      	ldrpl	r3, [r4, #20]
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	e7f4      	b.n	8004566 <__swsetup_r+0x92>
 800457c:	2000      	movs	r0, #0
 800457e:	e7f7      	b.n	8004570 <__swsetup_r+0x9c>
 8004580:	20000064 	.word	0x20000064

08004584 <__swhatbuf_r>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	460c      	mov	r4, r1
 8004588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800458c:	2900      	cmp	r1, #0
 800458e:	b096      	sub	sp, #88	; 0x58
 8004590:	4615      	mov	r5, r2
 8004592:	461e      	mov	r6, r3
 8004594:	da0d      	bge.n	80045b2 <__swhatbuf_r+0x2e>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	f013 0f80 	tst.w	r3, #128	; 0x80
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	bf0c      	ite	eq
 80045a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045a6:	2340      	movne	r3, #64	; 0x40
 80045a8:	2000      	movs	r0, #0
 80045aa:	6031      	str	r1, [r6, #0]
 80045ac:	602b      	str	r3, [r5, #0]
 80045ae:	b016      	add	sp, #88	; 0x58
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
 80045b2:	466a      	mov	r2, sp
 80045b4:	f000 f858 	bl	8004668 <_fstat_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dbec      	blt.n	8004596 <__swhatbuf_r+0x12>
 80045bc:	9901      	ldr	r1, [sp, #4]
 80045be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045c6:	4259      	negs	r1, r3
 80045c8:	4159      	adcs	r1, r3
 80045ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ce:	e7eb      	b.n	80045a8 <__swhatbuf_r+0x24>

080045d0 <__smakebuf_r>:
 80045d0:	898b      	ldrh	r3, [r1, #12]
 80045d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045d4:	079d      	lsls	r5, r3, #30
 80045d6:	4606      	mov	r6, r0
 80045d8:	460c      	mov	r4, r1
 80045da:	d507      	bpl.n	80045ec <__smakebuf_r+0x1c>
 80045dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	6123      	str	r3, [r4, #16]
 80045e4:	2301      	movs	r3, #1
 80045e6:	6163      	str	r3, [r4, #20]
 80045e8:	b002      	add	sp, #8
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	ab01      	add	r3, sp, #4
 80045ee:	466a      	mov	r2, sp
 80045f0:	f7ff ffc8 	bl	8004584 <__swhatbuf_r>
 80045f4:	9900      	ldr	r1, [sp, #0]
 80045f6:	4605      	mov	r5, r0
 80045f8:	4630      	mov	r0, r6
 80045fa:	f7ff fc21 	bl	8003e40 <_malloc_r>
 80045fe:	b948      	cbnz	r0, 8004614 <__smakebuf_r+0x44>
 8004600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004604:	059a      	lsls	r2, r3, #22
 8004606:	d4ef      	bmi.n	80045e8 <__smakebuf_r+0x18>
 8004608:	f023 0303 	bic.w	r3, r3, #3
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	e7e3      	b.n	80045dc <__smakebuf_r+0xc>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	6020      	str	r0, [r4, #0]
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	9b00      	ldr	r3, [sp, #0]
 8004620:	6163      	str	r3, [r4, #20]
 8004622:	9b01      	ldr	r3, [sp, #4]
 8004624:	6120      	str	r0, [r4, #16]
 8004626:	b15b      	cbz	r3, 8004640 <__smakebuf_r+0x70>
 8004628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800462c:	4630      	mov	r0, r6
 800462e:	f000 f82d 	bl	800468c <_isatty_r>
 8004632:	b128      	cbz	r0, 8004640 <__smakebuf_r+0x70>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	431d      	orrs	r5, r3
 8004644:	81a5      	strh	r5, [r4, #12]
 8004646:	e7cf      	b.n	80045e8 <__smakebuf_r+0x18>

08004648 <_close_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d06      	ldr	r5, [pc, #24]	; (8004664 <_close_r+0x1c>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fb9f 	bl	8000d96 <_close>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_close_r+0x1a>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_close_r+0x1a>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	200002f4 	.word	0x200002f4

08004668 <_fstat_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d07      	ldr	r5, [pc, #28]	; (8004688 <_fstat_r+0x20>)
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	f7fc fb9a 	bl	8000dae <_fstat>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d102      	bne.n	8004684 <_fstat_r+0x1c>
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	b103      	cbz	r3, 8004684 <_fstat_r+0x1c>
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	bd38      	pop	{r3, r4, r5, pc}
 8004686:	bf00      	nop
 8004688:	200002f4 	.word	0x200002f4

0800468c <_isatty_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4d06      	ldr	r5, [pc, #24]	; (80046a8 <_isatty_r+0x1c>)
 8004690:	2300      	movs	r3, #0
 8004692:	4604      	mov	r4, r0
 8004694:	4608      	mov	r0, r1
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	f7fc fb99 	bl	8000dce <_isatty>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d102      	bne.n	80046a6 <_isatty_r+0x1a>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	b103      	cbz	r3, 80046a6 <_isatty_r+0x1a>
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	200002f4 	.word	0x200002f4

080046ac <_lseek_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4d07      	ldr	r5, [pc, #28]	; (80046cc <_lseek_r+0x20>)
 80046b0:	4604      	mov	r4, r0
 80046b2:	4608      	mov	r0, r1
 80046b4:	4611      	mov	r1, r2
 80046b6:	2200      	movs	r2, #0
 80046b8:	602a      	str	r2, [r5, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f7fc fb92 	bl	8000de4 <_lseek>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_lseek_r+0x1e>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_lseek_r+0x1e>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	200002f4 	.word	0x200002f4

080046d0 <_read_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4d07      	ldr	r5, [pc, #28]	; (80046f0 <_read_r+0x20>)
 80046d4:	4604      	mov	r4, r0
 80046d6:	4608      	mov	r0, r1
 80046d8:	4611      	mov	r1, r2
 80046da:	2200      	movs	r2, #0
 80046dc:	602a      	str	r2, [r5, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	f7fc fb20 	bl	8000d24 <_read>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d102      	bne.n	80046ee <_read_r+0x1e>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	b103      	cbz	r3, 80046ee <_read_r+0x1e>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	200002f4 	.word	0x200002f4

080046f4 <_sbrk_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4d06      	ldr	r5, [pc, #24]	; (8004710 <_sbrk_r+0x1c>)
 80046f8:	2300      	movs	r3, #0
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	602b      	str	r3, [r5, #0]
 8004700:	f7fc fb7e 	bl	8000e00 <_sbrk>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_sbrk_r+0x1a>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	b103      	cbz	r3, 800470e <_sbrk_r+0x1a>
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	200002f4 	.word	0x200002f4

08004714 <_write_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d07      	ldr	r5, [pc, #28]	; (8004734 <_write_r+0x20>)
 8004718:	4604      	mov	r4, r0
 800471a:	4608      	mov	r0, r1
 800471c:	4611      	mov	r1, r2
 800471e:	2200      	movs	r2, #0
 8004720:	602a      	str	r2, [r5, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	f7fc fb1b 	bl	8000d5e <_write>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_write_r+0x1e>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_write_r+0x1e>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	200002f4 	.word	0x200002f4

08004738 <_free_r>:
 8004738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800473a:	2900      	cmp	r1, #0
 800473c:	d044      	beq.n	80047c8 <_free_r+0x90>
 800473e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004742:	9001      	str	r0, [sp, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f1a1 0404 	sub.w	r4, r1, #4
 800474a:	bfb8      	it	lt
 800474c:	18e4      	addlt	r4, r4, r3
 800474e:	f7ff fe35 	bl	80043bc <__malloc_lock>
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <_free_r+0x94>)
 8004754:	9801      	ldr	r0, [sp, #4]
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x30>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	b003      	add	sp, #12
 8004760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004764:	f7ff be30 	b.w	80043c8 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x46>
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	1961      	adds	r1, r4, r5
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1949      	addeq	r1, r1, r5
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x22>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x50>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x46>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1855      	adds	r5, r2, r1
 800478c:	42a5      	cmp	r5, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x70>
 8004790:	6824      	ldr	r4, [r4, #0]
 8004792:	4421      	add	r1, r4
 8004794:	1854      	adds	r4, r2, r1
 8004796:	42a3      	cmp	r3, r4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x26>
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	440c      	add	r4, r1
 80047a4:	6014      	str	r4, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x26>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x78>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6003      	str	r3, [r0, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x26>
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1949      	addeq	r1, r1, r5
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x26>
 80047c8:	b003      	add	sp, #12
 80047ca:	bd30      	pop	{r4, r5, pc}
 80047cc:	200002ec 	.word	0x200002ec

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
